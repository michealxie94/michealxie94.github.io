<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>003【LLM】从零开始训练大模型-知乎-何枝</title>
      <link href="/post/nlp003.html"/>
      <url>/post/nlp003.html</url>
      
        <content type="html"><![CDATA[<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a><strong>转载</strong></h2><p>本文转载于：<a href="https://zhuanlan.zhihu.com/p/636270877">知乎-何枝</a></p><blockquote><p>在这篇文章中，我们将尽可能详细地梳理一个完整的<code>LLM</code>训练流程。包括<code>模型预训练Pretrain</code>、<code>tokenizer训练</code> 、<code>指令微调Instruction Tuning</code>、<code>奖励模型Reward Mod</code>和 <code>强化学习RLHF</code>等环节。由于内容比较多，我们将逐步整理并完善这个文档。</p></blockquote><h2 id="预训练阶段Pretraining-Stage"><a href="#预训练阶段Pretraining-Stage" class="headerlink" title="预训练阶段Pretraining Stage"></a><code>预训练阶段Pretraining Stage</code></h2><p>当前，不少工作选择在一个较强的基座模型上进行微调，且通常效果不错（如：[<a href="https://link.zhihu.com/?target=https%3A//github.com/tatsu-lab/stanford_alpaca">alpaca</a>]、[<a href="https://link.zhihu.com/?target=https%3A//lmsys.org/blog/2023-03-30-vicuna/">vicuna</a>] 等）。</p><p>这种成功的前提在于：预训练模型和下游任务的差距不大，预训练模型中通常已经包含微调任务中所需要的知识。</p><p>但在实际情况中，我们通常会遇到一些问题，使得我们无法直接使用一些开源 backbone：</p><ol><li><strong>语言不匹配：</strong>大多数开源基座对中文的支持都不太友好，例如：[<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/decapoda-research/llama-7b-hf">Llama</a>]、[<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/mosaicml/mpt-7b">mpt</a>]、[<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/tiiuae/falcon-7b">falcon</a>] 等，这些模型在英文上效果都很优秀，但在中文上却差强人意。</li></ol><div class="table-container"><table><thead><tr><th>续写任务测试</th><th>LLaMA</th><th>MPT</th></tr></thead><tbody><tr><td>杭州西湖是</td><td>杭州西湖是杭州的一个静静的一个游泳池，游泳池是杭州西湖的一个游泳池，游泳池是杭州西湖的一个游泳池，游泳池是杭州西湖的一个游泳池，�</td><td>杭州西湖是中国最大的湖泊，是中国最大的湖泊，是中国最大的湖泊，是中国最大的湖泊，是中国最大的湖泊，是中国最大的湖泊，是中国最大的湖泊，</td></tr><tr><td>琅琊榜的导演是</td><td>琅琊榜的导演是很多的人都不知道，因为他的父亲是一位杰作家，他的父亲的杰作家是一位杰作家，</td><td>琅琊榜的导演是谁？Who are the directors of the Rolling Stone?琅琊榜的导演是谁？Who are the</td></tr></tbody></table></div><ol><li><strong>专业知识不足：</strong>当我们需要一个专业领域的<code>LLM</code>时，预训练模型中的知识就尤为重要。由于大多数预训练模型都是在通用训练语料上进行学习，对于一些特殊领域（金融、法律等）中的概念和名词无法具备很好的理解。我们通常需要在训练语料中加入一些领域数据（如：[<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/2305.12002.pdf">xuanyuan 2.0</a>]），以帮助模型在指定领域内获得更好的效果。</li></ol><p><img src="https://pic3.zhimg.com/v2-3d5561661832b05a7f0fe52055ba7ea2_b.jpg" alt></p><p>基于上述原因，我们在进行 <a href="#专有名词解释"><code>SFT[1]</code></a>步骤之前，先来看看预训练任务是如何做的。</p><h3 id="tokenizer-Training词表扩充"><a href="#tokenizer-Training词表扩充" class="headerlink" title="tokenizer Training词表扩充"></a><code>tokenizer Training词表扩充</code></h3><p>在进行预训练之前，我们需要先选择一个预训练的模型基座。</p><p>一个较为普遍的问题是：大部分优秀的语言模型都没有进行充分的中文预训练，</p><p>因此，许多工作都尝试将在英语上表现比较优秀的模型用中文语料进行二次预训练，期望其能够将英语上的优秀能力迁移到中文任务中来。</p><blockquote><p>已经有许多优秀的仓库做过这件事情，比如：[<a href="https://link.zhihu.com/?target=https%3A//github.com/ymcui/Chinese-LLaMA-Alpaca">Chinese-LLaMA-Alpaca</a>]。</p></blockquote><p>但在进行正式的训练之前，我们还有一步很重要的事情去做：<code>词表扩充</code>。</p><p>通俗来讲，<code>tokenizer</code> 的目的就是将一句话进行切词，并将切好词的列表喂给模型进行训练。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入句子 &gt;&gt;&gt; 你好世界</span><br><span class="line">切词结果 &gt;&gt;&gt; [&#x27;你&#x27;, &#x27;好&#x27;, &#x27;世&#x27;, &#x27;界&#x27;]</span><br></pre></td></tr></table></figure><p>通常，<code>tokenizer</code> 有 2 种常用形式：<code>WordPiece</code> 和 <code>BPE</code>。</p><h4 id="WordPiece"><a href="#WordPiece" class="headerlink" title="WordPiece"></a><strong><code>WordPiece</code></strong></h4><p><code>WordPiece</code> 很好理解，就是将所有的「常用字」和「常用词」都存到词表中，</p><p>当需要切词的时候就从词表里面查找即可。</p><p><img src="https://pic1.zhimg.com/v2-819c6c3e9b4c10c88e06eee58a11ebf8_b.jpg" alt></p><blockquote><p>上述图片来自可视化工具 [<a href="https://link.zhihu.com/?target=https%3A//github.com/HarderThenHarder/transformers_tasks/blob/main/tools/&lt;code&gt;tokenizer&lt;/code&gt;_viewer/readme.md">tokenizer_viewer</a>]。</p></blockquote><p>如上图所示，大名鼎鼎的 <code>BERT</code> 就使用的这种切词法。</p><p>当我们输入句子：你好世界，</p><p><code>BERT</code> 就会依次查找词表中对应的字，并将句子切成词的组合。</p><p><img src="https://pic3.zhimg.com/v2-daa04afee73491b2465f0c29149dcffa_b.jpg" alt></p><p>当遇到词表中不存在的字词时，<code>tokenizer</code> 会将其标记为特殊的字符 [UNK]：</p><p><img src="https://pic1.zhimg.com/v2-4a79c57436e4c5ec4b5525b9fd547e7c_b.jpg" alt></p><h4 id="Byte-Pair-Encoder（BPE）"><a href="#Byte-Pair-Encoder（BPE）" class="headerlink" title="Byte Pair Encoder（BPE）"></a><strong>Byte Pair Encoder（<code>BPE</code>）</strong></h4><p><code>WordPiece</code> 的方式很有效，但当字词数目过于庞大时这个方式就有点难以实现了。</p><p>对于一些多语言模型来讲，要想穷举所有语言中的常用词（穷举不全会造成 OOV），</p><p>既费人力又费词表大小，为此，人们引入另一种方法：<code>BPE</code>。</p><p><code>BPE</code> 不是按照中文字词为最小单位，而是按照 unicode 编码 作为最小粒度。</p><p>对于中文来讲，一个汉字是由 3 个 unicode 编码组成的，</p><p>因为平时我们不会拆开来看（毕竟中文汉字是不可拆分的），所以我一开始对这个概念也不太熟悉。</p><p>我们来看看 LLaMA 的 <code>tokenizer</code>（<code>BPE</code>）对中文是如何进行 encode 的：</p><p><img src="https://pic2.zhimg.com/v2-4cd433a354233d03bc2aad15745a7285_b.jpg" alt></p><blockquote><p>上述图片来自可视化工具 [<a href="https://link.zhihu.com/?target=https%3A//github.com/HarderThenHarder/transformers_tasks/blob/main/tools/&lt;code&gt;tokenizer&lt;/code&gt;_viewer/readme.md">tokenizer_viewer</a>]。</p></blockquote><p>可以看到，「编码」两个字能够被正常切成 2 个字，</p><p>但「待」却被切成了 3 个 <code>token</code>，这里的每个 <code>token</code> 就是 1 个 unicode 编码。</p><p><img src="https://pic1.zhimg.com/v2-66a59222fb083b240eac861eb026c73c_b.jpg" alt></p><p>通过 <code>token</code> 查找功能，我们可以发现「编」「码」在词表中，但「待」不在词表中。</p><p>但任何 1 个汉字都是可以由 unicode 表示（只是组合顺序不同），因此「待」就被切成了 3 个 <code>token</code>。</p><table data-draft-node="block" data-draft-type="table" data-size="normal" data-row-style="normal"><tbody><tr><td><code>BPE</code> 的优势</td><td>不会出现 OOV 的情况。不管是怎样的汉字，只要可以用 unicode 表示，就都会存在于词表中。</td></tr><tr><td><code>BPE</code> 的劣势</td><td>模型训练起来将会更吃力一些。毕竟像「待」这样的汉字特定 unicode 组合其实是不需要模型学习的，但模型却需要通过学习来知道合法的 unicode 序列。</td></tr></tbody></table><p>通常在模型训练不够充足的时候，模型会输出一些乱码（不合法的 unicode 序列）：</p><h4 id="词表扩充"><a href="#词表扩充" class="headerlink" title="词表扩充"></a><strong>词表扩充</strong></h4><p>为了降低模型的训练难度，人们通常会考虑在原来的词表上进行「词表扩充」，</p><p>也就是将一些常见的汉字 <code>token</code> 手动添加到原来的 <code>tokenizer</code> 中，从而降低模型的训练难度。</p><p>我们对比 [<a href="https://link.zhihu.com/?target=https%3A//github.com/ymcui/Chinese-LLaMA-Alpaca">Chinese-LLaMA</a>] 和 [<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/decapoda-research/llama-7b-hf">LLaMA</a>] 之间的 <code>tokenizer</code> 的区别：</p><p><img src="https://pic3.zhimg.com/v2-c4937d17cf9aef19f1fc161b6d923cd6_b.jpg" alt></p><blockquote><p>上述图片来自可视化工具 [<a href="https://link.zhihu.com/?target=https%3A//github.com/HarderThenHarder/transformers_tasks/blob/main/tools/&lt;code&gt;tokenizer&lt;/code&gt;_viewer/readme.md">tokenizer_viewer</a>]。</p></blockquote><p>我们可以发现：Chinese LLaMA 在原始 <code>tokenizer</code> 上新增了17953 个 tokens，且加入 <code>token</code> 的大部分为汉字。</p><p>而在 [<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/2304.07854.pdf">BELLE</a>] 中也有同样的做法：</p><p>在 120w 行中文文本上训练出一个 5w 规模的 <code>token</code> 集合，</p><p>并将这部分 <code>token</code> 集合与原来的 LLaMA 词表做合并，</p><p>最后再在 3.2B 的中文语料上对这部分新扩展的 <code>token</code> embedding 做二次预训练。</p><p><img src="https://pic2.zhimg.com/v2-cbae3dc2dc39804b3cb6d5ff547e7625_b.jpg" alt></p><h3 id="Language-Model-Pretraining"><a href="#Language-Model-Pretraining" class="headerlink" title="Language Model Pretraining"></a><code>Language Model Pretraining</code></h3><p>在扩充完 <code>tokenizer</code> 后，我们就可以开始正式进行模型的预训练步骤了。</p><p><code>Pretraining</code> 的思路很简单，就是输入一堆文本，让模型做 <code>Next token Prediction</code> 的任务，这个很好理解。</p><p>我们主要来讨论几种预训练过程中所用到的方法：数据源采样、数据预处理、模型结构。</p><h4 id="数据源采样"><a href="#数据源采样" class="headerlink" title="数据源采样"></a><strong>数据源采样</strong></h4><p>在 [<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/2005.14165.pdf">gpt3</a>] 的训练过程中，存在多个训练数据源，论文中提到：对不同的数据源会选择不同采样比例：</p><p><img src="https://pic2.zhimg.com/v2-8280f19219e9a4ec73a7cec4c4175ced_b.jpg" alt></p><p>通过「数据源」采样的方式，能够缓解模型在训练的时候受到「数据集规模大小」的影响。</p><p>从上图中可以看到，相对较大的数据集（Common Crawl）会使用相对较大的采样比例（60%），</p><p>这个比例远远小于该数据集在整体数据集中所占的规模（410 / 499 = 82.1%），</p><p>因此，CC 数据集最终实际上只被训练了 0.44（0.6 / 0.82 * (300 / 499））个 epoch。</p><p>而对于规模比较小的数据集（Wikipedia），则将多被训练几次（3.4 个 epoch）。</p><p>这样一来就能使得模型不会太偏向于规模较大的数据集，从而失去对规模小但作用大的数据集上的学习信息。</p><h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a><strong>数据预处理</strong></h4><p>数据预处理主要指如何将「文档」进行向量化。</p><p>通常来讲，在 <code>Finetune</code> 任务中，我们通常会直接使用 <code>truncation</code> 将超过阈值（2048）的文本给截断，</p><p>但在 <code>Pretrain</code> 任务中，这种方式显得有些浪费。</p><p>以书籍数据为例，一本书的内容肯定远远多余 2048 个 <code>token</code>，但如果采用头部截断的方式，</p><p>则每本书永远只能够学习到开头的 2048 tokens 的内容（连序章都不一定能看完）。</p><p>因此，最好的方式是将长文章按照 seq_len（2048）作分割，将切割后的向量喂给模型做训练。</p><h4 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a><strong>模型结构</strong></h4><p>为了加快模型的训练速度，通常会在 decoder 模型中加入一些 tricks 来缩短模型训练周期。</p><p>目前大部分加速 tricks 都集中在 <code>Attention</code> 计算上（如：<a href="#专有名词解释"><code>MQA[2]</code></a> 和 <a href="#专有名词解释"><code>Flash Attention[3]</code></a> [<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/tiiuae/falcon-40b">falcon</a>] 等）；</p><p>此外，为了让模型能够在不同长度的样本上都具备较好的推理能力，</p><p>通常也会在 <code>Position Embedding</code> 上进行些处理，选用 ALiBi（[<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/bigscience/bloom-7b1">Bloom</a>]）或 RoPE（[<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/spaces/THUDM/GLM-130B">GLM-130B</a>]）等。</p><p>具体内容可以参考下面这篇文章：</p><h3 id="数据集清理"><a href="#数据集清理" class="headerlink" title="数据集清理"></a>数据集清理</h3><p>中文预训练数据集可以使用 [<a href="https://link.zhihu.com/?target=https%3A//data.baai.ac.cn/details/WuDaoCorporaText">悟道</a>]，数据集分布如下（主要以百科、博客为主）：</p><p><img src="https://pic4.zhimg.com/v2-3062044c5131dd4589ed3fdb10ec94eb_b.jpg" alt></p><p>但开源数据集可以用于实验，如果想突破性能，则需要我们自己进行数据集构建。</p><p>在 [<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/2306.01116.pdf">falcon paper</a>] 中提到，</p><p>仅使用「清洗后的互联网数据」就能够让模型比在「精心构建的数据集」上有更好的效果，</p><p>一些已有的数据集和它们的处理方法如下：</p><p><img src="https://pic2.zhimg.com/v2-9758e1401e4e7a38ea4df9e83d2c4665_b.jpg" alt></p><p>有关 Falcon 更多的细节可以看这里：</p><h3 id="模型效果评测"><a href="#模型效果评测" class="headerlink" title="模型效果评测"></a>模型效果评测</h3><p>关于 Language Modeling 的量化指标，较为普遍的有 [<a href="https://zhuanlan.zhihu.com/p/424162193">PPL</a>]，[<a href="https://zhuanlan.zhihu.com/p/424162193">BPC</a>] 等，</p><p>可以简单理解为在生成结果和目标文本之间的 Cross Entropy Loss 上做了一些处理。</p><p>这种方式可以用来评估模型对「语言模板」的拟合程度，</p><p>即给定一段话，预测后面可能出现哪些合法的、通顺的字词。</p><p>但仅仅是「生成通顺句子」的能力现在已经很难满足现在人们的需求，</p><p>大部分<code>LLM</code>都具备生成流畅和通顺语句能力，很难比较哪个好，哪个更好。</p><p><strong>为此，我们需要能够评估另外一个大模型的重要能力 —— 知识蕴含能力</strong>。</p><h4 id="C-Eval"><a href="#C-Eval" class="headerlink" title="C-Eval"></a><strong>C-Eval</strong></h4><p>一个很好的中文知识能力测试数据集是 [<a href="https://link.zhihu.com/?target=https%3A//github.com/SJTU-LIT/ceval">C-Eval</a>]，涵盖1.4w 道选择题，共 52 个学科。</p><p>覆盖学科如下：</p><p><img src="https://pic1.zhimg.com/v2-9eaf3f515f7a0c45a8ebc312f0c86438_b.jpg" alt></p><p>由于是选择题的形式，我们可以通过将题目写进 <code>prompt</code> 中，</p><p>并让模型续写 1 个 <code>token</code>，判断这个续写 <code>token</code> 的答案是不是正确答案即可。</p><p>但大部分没有精调过的预训练模型可能无法续写出「A B C D」这样的选项答案，</p><p>因此，官方推荐使用 5-shot 的方式来让模型知道如何输出答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">以下是中国关于会计考试的单项选择题，请选出其中的正确答案。</span><br><span class="line"></span><br><span class="line">下列关于税法基本原则的表述中，不正确的是____。</span><br><span class="line">A. 税收法定原则包括税收要件法定原则和税务合法性原则</span><br><span class="line">B. 税收公平原则源于法律上的平等性原则</span><br><span class="line">C. 税收效率原则包含经济效率和行政效率两个方面</span><br><span class="line">D. 税务机关按法定程序依法征税，可以自由做出减征、停征或免征税款的决定</span><br><span class="line">答案：D</span><br><span class="line"></span><br><span class="line">甲公司是国内一家领先的新媒体、通信及移动增值服务公司，由于遭受世界金融危机，甲公司经济利润严重下滑，经营面临困境，但为了稳定职工队伍，公司并未进行裁员，而是实行高层管理人员减薪措施。甲公司此举采用的收缩战略方式是____。</span><br><span class="line">A. 转向战略</span><br><span class="line">B. 放弃战略</span><br><span class="line">C. 紧缩与集中战略</span><br><span class="line">D. 稳定战略</span><br><span class="line">答案：C</span><br><span class="line"></span><br><span class="line">...             # 第 3, 4, 5 道样例题</span><br><span class="line"></span><br><span class="line">下列各项中，不能增加企业核心竞争力的是____。</span><br><span class="line">A. 产品差异化</span><br><span class="line">B. 购买生产专利权</span><br><span class="line">C. 创新生产技术</span><br><span class="line">D. 聘用生产外包商</span><br><span class="line">答案：</span><br></pre></td></tr></table></figure><p>通过前面的样例后，模型能够知道在「答案：」后面应该输出选项字母。</p><p>于是，我们获得模型续写后的第一个 <code>token</code> 的概率分布（logits），</p><p>并取出「A B C D」这 4 个字母的概率，通过 softmax 进行归一化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">probs = (</span><br><span class="line">    torch.nn.functional.softmax(</span><br><span class="line">        torch.tensor(</span><br><span class="line">            [</span><br><span class="line">                logits[self.&lt;code&gt;tokenizer&lt;/code&gt;.encode(</span><br><span class="line">                    &quot;A&quot;, bos=False, eos=False)[0]],</span><br><span class="line">                logits[self.&lt;code&gt;tokenizer&lt;/code&gt;.encode(</span><br><span class="line">                    &quot;B&quot;, bos=False, eos=False)[0]],</span><br><span class="line">                logits[self.&lt;code&gt;tokenizer&lt;/code&gt;.encode(</span><br><span class="line">                    &quot;C&quot;, bos=False, eos=False)[0]],</span><br><span class="line">                logits[self.&lt;code&gt;tokenizer&lt;/code&gt;.encode(</span><br><span class="line">                    &quot;D&quot;, bos=False, eos=False)[0]],</span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">        dim=0,</span><br><span class="line">    ).detach().cpu().numpy()</span><br><span class="line">)</span><br><span class="line">pred = &#123;0: &quot;A&quot;, 1: &quot;B&quot;, 2: &quot;C&quot;, 3: &quot;D&quot;&#125;[np.argmax(probs)]           # 将概率最大的选项作为模型输出的答案</span><br></pre></td></tr></table></figure><p>C-Eval 通过这种方式测出了许多模型在中文知识上的效果，</p><p>由于是 4 选项问题，所以基线（随机选择）的正确率是 25%。</p><p>C-Eval 也再一次证明了 <code>GPT-4</code> 是个多么强大的知识模型：</p><p><img src="https://pic3.zhimg.com/v2-973fde52fa9667a4f2cea7794653b5da_b.jpg" alt></p><h2 id="指令微调阶段Instruction-Tuning-Stage"><a href="#指令微调阶段Instruction-Tuning-Stage" class="headerlink" title="指令微调阶段Instruction Tuning Stage"></a>指令微调阶段<code>Instruction Tuning Stage</code></h2><p>在完成第一阶段的预训练后，就可以开始进到指令微调阶段了。</p><p>由于预训练任务的本质在于「续写」，而「续写」的方式并一定能够很好的回答用户的问题。</p><p>例如：</p><div class="table-container"><table><thead><tr><th>用户问题</th><th>用户预期回答</th><th>模型续写结果</th></tr></thead><tbody><tr><td>《无间道》的主演有哪些？</td><td>刘德华、梁朝伟</td><td>《无间道》的主演有哪些？不少观众期待看到阵容公告，今天小编…</td></tr></tbody></table></div><p>因为训练大多来自互联网中的数据，我们无法保证数据中只存在存在规范的「一问一答」格式，</p><p>这就会造成预训练模型通常无法直接给出人们想要的答案。</p><p>但是，这并不代表预训练模型「无知」，只是需要我们用一些巧妙的「技巧」来引导出答案：</p><div class="table-container"><table><thead><tr><th>用户问题</th><th>用户预期回答</th><th>模型续写结果</th></tr></thead><tbody><tr><td>《无间道》的主演有</td><td>刘德华、梁朝伟</td><td>《无间道》的主演有刘德华、梁朝伟和黄秋生,而这部电影也是香港警匪片的代表作之一。</td></tr></tbody></table></div><p>不过，这种需要用户精心设计从而去「套」答案的方式，显然没有那么优雅。</p><p><code>既然模型知道这些知识，只是不符合我们人类的对话习惯，那么我们只要再去教会模型「如何对话」就好了。</code></p><p><strong>这就是 <code>Instruction Tuning</code> 要做的事情，即<code>指令对齐</code></strong>。</p><p>OpenAI 在 [<a href="https://link.zhihu.com/?target=https%3A//openai.com/research/instruction-following">instruction-following</a>] 中展示了 GPT-3 和经过指令微调前后模型的区别：</p><p><img src="https://pic3.zhimg.com/v2-a7a8e7aed0750d189f792b19e8272dfe_b.jpg" alt></p><h3 id="Self-Instruction"><a href="#Self-Instruction" class="headerlink" title="Self Instruction"></a><code>Self Instruction</code></h3><p>既然我们需要去「教会模型说人话」，</p><p>那么我们就需要去精心编写各式各样人们在对话中可能询问的问题，以及问题的答案。</p><p>在 [<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/2203.02155.pdf">InstructGPT Paper</a>] 中，使用了 1.3w 的数据来对 GPT-3.5 进行监督学习（下图中左 <code>SFT Data</code>）：</p><p><img src="https://pic1.zhimg.com/v2-23f809decd7d6f6c77a640cfbd8ad3c4_b.jpg" alt></p><p>可以观察到，数据集中人工标注（labeler）占大头，</p><p>这还仅仅只是 <code>InstructGPT</code>，和 <code>ChatGPT</code> 远远不是一个量级。</p><blockquote><p>非官方消息：<code>ChatGPT</code> 使用了百万量级的数据进行指令微调。</p></blockquote><p>可见，使用人工标注是一件成本巨大的事情，只是找到人不够，需要找到「专业」且「认知一致」的标注团队。</p><p>如果这件事从头开始做自然很难（OpenAI 确实厉害），但今天我们已经有了 <code>ChatGPT</code> 了，</p><p><strong>我们让 <code>ChatGPT</code> 来教我们自己的模型不就好了吗？</strong></p><p>这就是 <code>Self Instruction</code> 的思路，即通过 <code>ChatGPT</code> 的输入输出来蒸馏自己的模型。</p><p>一个非常出名的项目是 [<a href="https://link.zhihu.com/?target=https%3A//github.com/tatsu-lab/stanford_alpaca">stanford_alpaca</a>]。</p><p>如果从 <code>ChatGPT</code> 「套」数据，那么我们至少需要「套」哪些数据。</p><p><code>Instruction Tuning</code> 中的「输入」（问题）和「输出」（答案）是训练模型的关键，</p><p>答案很好得到，喂给 <code>ChatGPT</code> 问题根据返回结果就能获得，</p><p>但「问题」从哪里获得呢？</p><p>（靠人想太累了，屏幕前的你不妨试试，看看短时间内能想出多少有价值的问题）</p><p>Alpaca 则是使用「种子指令（seed）」，使得 <code>ChatGPT</code> 既生成「问题」又生成「答案」。</p><p>由于 Alpaca 是英文项目，为了便于理解，我们使用相同思路的中文项目 [<a href="https://link.zhihu.com/?target=https%3A//github.com/LianjiaTech/BELLE">BELLE</a>] 作为例子。</p><p>通俗来讲，就是人为的先给一些「训练数据样例」让 <code>ChatGPT</code> 看，</p><p>紧接着利用 <code>ChatGPT</code> 的续写功能，让其不断地举一反三出新的训练数据集：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">你被要求提供10个多样化的任务指令。这些任务指令将被提供给GPT模型，我们将评估GPT模型完成指令的能力。</span><br><span class="line">以下是你提供指令需要满足的要求：</span><br><span class="line">1.尽量不要在每个指令中重复动词，要最大化指令的多样性。</span><br><span class="line">2.使用指令的语气也应该多样化。例如，将问题与祈使句结合起来。</span><br><span class="line">3.指令类型应该是多样化的，包括各种类型的任务，类别种类例如：brainstorming，open QA，closed QA，rewrite，extract，generation，classification，chat，summarization。</span><br><span class="line">4.GPT语言模型应该能够完成这些指令。例如，不要要求助手创建任何视觉或音频输出。例如，不要要求助手在下午5点叫醒你或设置提醒，因为它无法执行任何操作。例如，指令不应该和音频、视频、图片、链接相关，因为GPT模型无法执行这个操作。</span><br><span class="line">5.指令用中文书写，指令应该是1到2个句子，允许使用祈使句或问句。</span><br><span class="line">6.你应该给指令生成适当的输入，输入字段应包含为指令提供的具体示例，它应该涉及现实数据，不应包含简单的占位符。输入应提供充实的内容，使指令具有挑战性。</span><br><span class="line">7.并非所有指令都需要输入。例如，当指令询问一些常识信息，比如“世界上最高的山峰是什么”，不需要提供具体的上下文。在这种情况下，我们只需在输入字段中放置“&lt;无输入&gt;”。当输入需要提供一些文本素材（例如文章，文章链接）时，就在输入部分直接提供一些样例。当输入需要提供音频、图片、视频或者链接时，则不是满足要求的指令。</span><br><span class="line">8.输出应该是针对指令和输入的恰当回答。 </span><br><span class="line">下面是10个任务指令的列表：</span><br><span class="line">###</span><br><span class="line">1. 指令: 在面试中如何回答这个问题？</span><br><span class="line">1. 输入:当你在车里独处时，你会想些什么？</span><br><span class="line">1. 输出:如果是在晚上，我通常会考虑我今天所取得的进步，如果是在早上，我会思考如何做到最好。我也会尝试练习感恩和活在当下的状态，以避免分心驾驶。</span><br><span class="line">###</span><br><span class="line">2. 指令: 按人口对这些国家进行排名。</span><br><span class="line">2. 输入:巴西，中国，美国，日本，加拿大，澳大利亚</span><br><span class="line">2. 输出:中国，美国，巴西，日本，加拿大，澳大利亚</span><br><span class="line">###</span><br><span class="line">3. 指令:</span><br></pre></td></tr></table></figure><p>如上述例子所示，我们先给出 2 个样例，并让 <code>ChatGPT</code> 进行续写：</p><p><img src="https://pic1.zhimg.com/v2-9bc23dd4ff89c4a463a6f92eb4c54c90_b.jpg" alt></p><p>关于 BELLE 的更多细节可以参考这篇文章：</p><h3 id="开源数据集整理"><a href="#开源数据集整理" class="headerlink" title="开源数据集整理"></a>开源数据集整理</h3><p>在这一章中，我们将梳理一些开源的 <code>Instruction Tuning</code> 的数据集，</p><p>除了直接拿来用以外，我们期望通过分析这些已有数据集，从而学习如何构建一个指令数据集。</p><h4 id="Alpaca"><a href="#Alpaca" class="headerlink" title="Alpaca"></a><strong>Alpaca</strong></h4><p>[<a href="https://link.zhihu.com/?target=https%3A//github.com/tatsu-lab/stanford_alpaca/blob/main/alpaca_data.json">stanford_alpaca</a>] 采用上述的 <code>Self Instruction</code> 的方式采集了 5200 条指令训练数据集。</p><p>数据样例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;instruction&quot;: &quot;Arrange the words in the given sentence to form a grammatically correct sentence.&quot;,</span><br><span class="line">    &quot;input&quot;: &quot;quickly the brown fox jumped&quot;,</span><br><span class="line">    &quot;output&quot;: &quot;The quick brown fox jumped quickly.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，instruction 代表要求模型做的任务，input 代表用户输入， output 代表喂给模型的 label。</p><p>Alpaca 覆盖了多种类型的指令，其数据分布如下：</p><p><img src="https://pic1.zhimg.com/v2-90866e67c5ae6f0e383db95db5bcc0a4_b.jpg" alt></p><p>包含写作、描述、分类、摘要等多种类型的任务集合。</p><h4 id="BELLE"><a href="#BELLE" class="headerlink" title="BELLE"></a><strong>BELLE</strong></h4><p>BELLE 开放了好几种规模的数据集，[<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/datasets/BelleGroup/train_1M_CN">100万</a>]、[<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/datasets/BelleGroup/train_2M_CN">200万</a>]、[<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/datasets/BelleGroup/train_3.5M_CN">350万</a>] 等。</p><p>训练数据集样例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;instruction&quot;: &quot;判断给定的文章是否符合语法规则。如果不符合，请提供修改建议。 下面是一篇文章的开头: ‘为了探讨这个主题，本文将提供一系列数据和实例，以证明这一观点。’&quot;,</span><br><span class="line">    &quot;input&quot;: &quot;&quot;,</span><br><span class="line">    &quot;output&quot;: &quot;这个开头符合语法规则。&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于数据量很大，我们无法统计出训练数据集中各任务的真实占比，</p><p>但从 [<a href="https://link.zhihu.com/?target=https%3A//github.com/LianjiaTech/BELLE/blob/main/eval/eval_set.json">1000条评测集</a>] 数据分布可以推测出，训练数据集中同样包含：摘要、问答、分类等任务。</p><p><img src="https://pic1.zhimg.com/v2-6698ae5b6e3d6b7485ea66f82726f428_b.jpg" alt></p><p>我们按照类别对评测数据进行采样，结果如下：</p><div class="table-container"><table><thead><tr><th>任务名称</th><th>例子</th></tr></thead><tbody><tr><td>文本生成</td><td>为一种智能手表编写用户手册，包括详细的使用说明和操作步骤。</td></tr><tr><td>头脑风暴</td><td>针对给定的主题，进行头脑风暴并记录所有想法。  </td></tr></tbody></table></div><p>如何提高公司的销售额？ |<br>| 开放域问答 | 用一两句话描述著名的尼罗河是如何形成的。 |<br>| 封闭域问答 | 从以下选项中选择正确的词汇填空以完整下面的句子。 他喜欢去_______看电影。A) 邮局 B）超市 C）电影院 D）音乐会 |<br>| 分类 | 请将以下这篇文章分类为新闻报道、科学文章或社论。<br>据媒体新闻援引美国福克斯新闻网报道，美国伯克希尔哈撒韦公司首席执行官、著名投资人巴菲特近日就美国银行业危机与总统拜登的团队进行对话。 |<br>| 抽取 | 基于以下表格，请问张三的考勤情况<br>员工姓名,日期,上班时间,下班时间,是否迟到,是否早退,是否请假<br>张三,1月1日,8:30,17:30,否,否,否<br>李四,1月1日,9:00,18:00,是,否,否<br>王五,1月1日,8:00,16:30,否,是,否<br>赵六,1月1日,8:30,17:00,否,否,是<br>张三,1月2日,8:00,17:00,否,否,否<br>李四,1月2日,8:30,17:30,否,否,否<br>王五,1月2日,9:00,18:00,是,否,否<br>赵六,1月2日,8:30,17:00,否,否,是 |<br>| 重写 | 根据提供的文本重写其中的一段，使之更加简明扼要，同时不丢失原文本的主要信息。<br>纽约市，简称“纽约”，通常被称为“大苹果”，是美国最大的城市，也是全世界最大的城市之一。位于美国东海岸，东北部边界是大西洋，在新泽西州的东南部。 |<br>| 摘要 | 基于下面的这个故事，总结其中最重要的三个事件。<br>小明是一个好学生，每天早上都要起得很早去上学。有一天，他迟到了，因为他的家里来了一个客人。晚上，他参加了一次班级会议，会议主题是如何提高学习效率。回到家后，他又花了一些时间复习功课。 |<br>| Code &amp; Math | 按照以下要求，写一个SQL查询语句：从表中查找所有性别为女性的学生的姓名和学号。<br>SELECT name, id FROM students WHERE gender = ‘女性’ |</p><h4 id="Vicuna"><a href="#Vicuna" class="headerlink" title="Vicuna"></a><strong>Vicuna</strong></h4><h4 id="BAIZE"><a href="#BAIZE" class="headerlink" title="BAIZE"></a><strong>BAIZE</strong></h4><h3 id="模型的评测方法"><a href="#模型的评测方法" class="headerlink" title="模型的评测方法"></a>模型的评测方法</h3><p>比起预训练（<code>Pretrain</code>）环节里相对明确的评价指标（如PPL、NLL等），</p><p>Instruction 环节中的评价指标比较令人头疼。</p><p>鉴于语言生成模型的发展速度，BLEU 和 ROUGH 这样的指标已经不再客观。</p><p>一种比较流行的方式是像 [<a href="https://link.zhihu.com/?target=https%3A//github.com/lm-sys/FastChat/blob/main/fastchat/eval/table/&lt;code&gt;prompt&lt;/code&gt;.jsonl">FastChat</a>] 中一样，利用 <code>GPT-4</code> 为模型的生成结果打分，</p><p>我们也尝试使用同样的 <code>prompt</code> 对 3 种开源模型：OpenLlama、ChatGLM、BELLE 进行测试。</p><blockquote><p>注意：下面的测试结果仅源自我们自己的实验，<strong>不具备任何权威性</strong>。</p></blockquote><p>对于每一个问题，我们先获得 <code>ChatGPT</code> 的回复，以及另外 3 种模型的回复，</p><p>接着我们将 「<code>ChatGPT</code> 答案 - 候选模型答案」这样的 pair 喂给 <code>GPT-4</code> 打分（满分为 10 分）。</p><p>得到的结果如下：</p><p><img src="https://pic1.zhimg.com/v2-30369e5361b3097e6c9c3254c1f9b5e4_b.jpg" alt></p><p>我们对每个任务单独进行了统计，并在最后一列求得平均值。</p><p><code>GPT-4</code> 会对每一条测试样本的 2 个答案分别进行打分，并给出打分理由：</p><p><img src="https://pic3.zhimg.com/v2-8adadb3bab29880e9fecacb673da87d2_b.jpg" alt></p><p>但是，我们发现，<code>GPT-4</code> 打出的分数和给出理由<strong>并不一定正确</strong>。</p><p>如上图所示，<code>GPT-4</code> 为右边模型的答案打出了更高的分数，给出的理由是：</p><p>将「最长时期」改为了「最长时期之一」会更准确。</p><p>但事实上，Instruction 中明确设定就是「最长时期」，</p><p>这种「给高分」的理由其实是不正确的。</p><p>此外，我们还发现，仅仅调换句子顺序也会对最后打分结果产生影响，</p><p>针对这个问题，我们考虑「调换句子顺序并求和平均」来缓解。</p><p>但不管怎么样，<code>GPT-4</code> 给出的分数或许并没有我们想象中的那么靠谱，</p><p>为此，我们通过人工的 Review 的方式对每个答案进行了一次回扫，得到的结果和标准如下：</p><blockquote><p>再次重申：我们只是期望指出 <code>GPT-4</code> 打分可能会和实际产生偏差的问题，<strong>这里排名不具备任何权威性</strong>。</p></blockquote><p><img src="https://pic1.zhimg.com/v2-73395d9c1c2bb8b8376009716428f530_b.jpg" alt></p><p>我们可以看到，</p><p>在 <code>GPT-4</code> 打分的结果中，已经有模型的效果甚至超过了 <code>ChatGPT</code>（分数为 1.02），</p><p>但再经过人工 Review 后，<code>ChatGPT</code> 的答案是我们认为更合理一些的。</p><p>当然，最近陆陆续续的推出了许多新的评测方法，如：[<a href="https://link.zhihu.com/?target=https%3A//github.com/WeOpenML/PandaLM">PandaLM</a>]，</p><p>以及许多比较有影响力的评测集，如：[<a href="https://link.zhihu.com/?target=https%3A//github.com/SJTU-LIT/ceval">C-Eval</a>]、[<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/spaces/HuggingFaceH4/open_llm_leaderboard">open_llm_leaderboard</a>] 等，</p><p>我们或许会在后续的整理中更新。</p><h2 id="专有名词解释"><a href="#专有名词解释" class="headerlink" title="专有名词解释"></a><strong>专有名词解释</strong></h2><h3 id="soft-fine-tuning"><a href="#soft-fine-tuning" class="headerlink" title="soft fine tuning"></a><code>soft fine tuning</code></h3><p><code>Soft Fine-Tuning for Cross-Domain Transfer Learning</code>（软精调用于跨领域迁移学习）是一种用于解决跨领域迁移学习问题的方法。<br>该方法旨在通过在源领域和目标领域之间进行知识传递，从而提高目标领域的性能。<br><code>Soft Fine-Tuning</code>方法的核心思想是将<code>源领域和目标领域的数据进行对齐，然后使用源领域的知识来指导目标领域的学习过程</code>。<br>具体而言，该方法使用一个<code>共享的特征提取器来提取源领域和目标领域的特征表示</code>。<br>然后，通过<code>最小化源领域和目标领域之间的特征分布差异来对特征进行对齐</code>。最后，使用源领域的标签信息来辅助目标领域的学习过程，以提高目标领域的性能。</p><ol><li>论文：<code>Soft Fine-Tuning for Cross-Domain Transfer Learning</code></li><li><code>GitHub</code>代码实现：<ul><li>链接：待定</li></ul></li></ol><h3 id="MQA"><a href="#MQA" class="headerlink" title="MQA"></a><code>MQA</code></h3><p><code>总    结</code>：<code>MQA</code>是指多头自注意力(<code>Multi-Head Self-Attention</code>)机制，是一种在自注意力机制中<code>引入多个头部</code>的方法。<br><code>背    景</code>：自注意力机制是一种在序列中计算每个位置与其他位置的关联性的方法，通过计算每个位置与其他位置的<code>相似度</code>得到一个权重向量，用于加权求和得到每个位置的表示。<br><code>主要贡献</code>：<code>MQA</code>则是在计算相似度时<code>引入了多个头部，每个头部计算一种不同的相似度</code>。<br><code>目    的</code>：<br>1、通过引入多个头部，可以捕捉到不同的关系和语义信息，提高模型的表达能力。<br>2、提高模型在处理<code>序列数据</code>时的性能。</p><h3 id="Flash-Attention"><a href="#Flash-Attention" class="headerlink" title="Flash Attention"></a><code>Flash Attention</code></h3><p><code>总    结</code>：<code>Flash Attention</code>是一种注意力机制，通过引入全局上下文信息，能够更全面地捕捉序列数据中的依赖关系，用于提高神经网络在处理序列数据时的性能。</p><p><code>背    景</code>：在序列数据中，每个元素都与其周围的元素相关联，而传统的注意力机制通常<code>只考虑了元素之间的局部关系</code>。<br><code>主要贡献</code>：通过引入<code>全局上下文信息</code>，能够更全面地捕捉序列数据中的依赖关系。<br><code>具体做法</code>：<br>1、通过将序列数据分为多个子序列，每个子序列都包含了原始序列数据的一部分。<br>2、然后，每个子序列都会与其他子序列进行<code>交互</code>，以获取全局上下文信息。这种交互可以通过不同的方式实现，例如计算子序列之间的相似度得分，然后根据得分来决定信息的传递程度。<br><code>目    的</code>：1、捕捉序列数据中的依赖关系 2、提高神经网络在处理序列数据时的性能<br><code>论    文</code>: <a href="https://arxiv.org/abs/2205.14135"><code>FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness</code></a><br><code>论文总结</code>:<br>这段内容讨论了Transformer模型在处理长序列时的速度和内存消耗问题。由于自注意力机制的时间和内存复杂度与序列长度的平方成正比，因此Transformer在长序列上运行得比较慢且消耗大量内存。近似注意力方法试图通过在模型质量和计算复杂度之间进行权衡来解决这个问题，但通常不能实现显著的速度提升。作者认为一个缺失的原则是使注意力算法能够考虑输入输出(I/O)操作，即在不同层级的GPU内存之间进行读写操作。作者提出了一种名为FlashAttention的I/O感知精确注意力算法，使用分块技术来减少GPU高带宽内存(HBM)和GPU片上静态随机存储器(SRAM)之间的内存读写次数。作者分析了FlashAttention的I/O复杂度，表明它需要比标准注意力更少的HBM访问次数，并且对于一定大小的SRAM是最优的。作者还将FlashAttention扩展到了块稀疏注意力，得到了一种比任何现有的近似注意力算法更快的近似注意力算法。FlashAttention在训练Transformer模型方面表现比现有基准更快：相较于MLPerf 1.1训练速度记录，BERT-large (seq. length 512)的端到端墙时钟速度提升了15%，GPT-2 (seq. length 1K)的速度提升了3倍，长距离竞技场 (seq. length 1K-4K)的速度提升了2.4倍。FlashAttention和块稀疏FlashAttention使得Transformer模型可以处理更长的上下文，从而得到更高质量的模型(GPT-2 perplexity提高了0.7，长文档分类达到了6.4个点的提升)，并且实现了全新的能力：在Path-X挑战赛上，它是首个在序列长度为16K时达到超过随机猜测准确率的Transformer模型(61.4%准确率)，在Path-256挑战赛上，则是序列长度为64K时获得超过随机猜测准确率的首个Transformer模型(63.1%准确率)。</p><h3 id="ALiBi的position-embedding"><a href="#ALiBi的position-embedding" class="headerlink" title="ALiBi的position embedding"></a><code>ALiBi的position embedding<code></code></code></h3><p>ALiBi是阿里巴巴开发的一个自然语言处理模型，它在Transformer模型中使用了position embedding来编码输入序列中每个单词的位置信息。</p><p>在Transformer模型中，输入序列的每个单词都会经过一个embedding层进行编码，将其转换为一个固定维度的向量表示。然而，由于Transformer模型是基于注意力机制的，它并没有对输入序列的顺序进行建模。为了引入位置信息，Transformer模型引入了position embedding。</p><p>position embedding是一个与输入序列的位置相关的向量。它的维度与单词的embedding维度相同，但是每个位置上的值是不同的。通过将position embedding与单词的embedding相加，可以将位置信息融入到输入向量中。</p><p>具体来说，position embedding是通过一个特殊的矩阵进行计算得到的。这个矩阵的维度是(positions, embedding_dim)，其中positions表示输入序列的最大长度，embedding_dim表示单词embedding的维度。矩阵中的每一行对应一个位置，每一列对应embedding向量的一个维度。通过查表的方式，可以获取到输入序列中每个单词的位置编码。</p><p>在ALiBi中，position embedding会与单词的embedding相加，然后作为输入传递给Transformer模型。这样，Transformer模型就能够同时考虑到单词的语义信息和位置信息，从而更好地理解输入序列。</p>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LC931. 下降路径最小和</title>
      <link href="/post/LC931.html"/>
      <url>/post/LC931.html</url>
      
        <content type="html"><![CDATA[<p>给你一个 <code>n x n</code> 的<strong> 方形 </strong>整数数组&nbsp;<code>matrix</code> ，请你找出并返回通过 <code>matrix</code> 的<strong>下降路径</strong><em> </em>的<strong> </strong><strong>最小和</strong> 。</p><p><strong>下降路径</strong> 可以从第一行中的任何元素开始，并从每一行中选择一个元素。在下一行选择的元素和当前行所选元素最多相隔一列（即位于正下方或者沿对角线向左或者向右的第一个元素）。具体来说，位置 <code>(row, col)</code> 的下一个元素应当是 <code>(row + 1, col - 1)</code>、<code>(row + 1, col)</code> 或者 <code>(row + 1, col + 1)</code> 。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><p><img alt src="https://assets.leetcode.com/uploads/2021/11/03/failing1-grid.jpg" style="height: 500px; width: 499px;"></p><pre><strong>输入：</strong>matrix = [[2,1,3],[6,5,4],[7,8,9]]<strong>输出：</strong>13<strong>解释：</strong>如图所示，为和最小的两条下降路径</pre><p><strong>示例 2：</strong></p><p><img alt src="https://assets.leetcode.com/uploads/2021/11/03/failing2-grid.jpg" style="height: 365px; width: 164px;"></p><pre><strong>输入：</strong>matrix = [[-19,57],[-40,-5]]<strong>输出：</strong>-59<strong>解释：</strong>如图所示，为和最小的下降路径</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>n == matrix.length == matrix[i].length</code></li>    <li><code>1 &lt;= n &lt;= 100</code></li>    <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li></ul><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>标准的<code>多点dfs</code>或者<code>二维dp</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment"># 多点dfs</span></span><br><span class="line">    <span class="comment"># 自上而下、自下而上都可以 + 记忆化搜索</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minFallingPathSum</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @cache</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x,y</span>):</span><br><span class="line">            ans = matrix[x][y]</span><br><span class="line">            <span class="keyword">if</span> x == n-<span class="number">1</span> :</span><br><span class="line">                <span class="keyword">return</span> ans</span><br><span class="line">            res = inf</span><br><span class="line">            <span class="keyword">for</span> dy <span class="keyword">in</span> <span class="built_in">range</span>(y-<span class="number">1</span>,y+<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> dy &gt;= <span class="number">0</span> <span class="keyword">and</span> dy &lt;= n-<span class="number">1</span>:</span><br><span class="line">                    res = <span class="built_in">min</span>(res,dfs(x+<span class="number">1</span>,dy))</span><br><span class="line">            <span class="keyword">return</span>  ans+res</span><br><span class="line"></span><br><span class="line">        mi = inf </span><br><span class="line">        n = <span class="built_in">len</span>(matrix)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="comment"># 从第一行进行dfs</span></span><br><span class="line">            mi = <span class="built_in">min</span>(mi,dfs(<span class="number">0</span>,i))</span><br><span class="line">        <span class="keyword">return</span> mi</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minFallingPathSum</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment">#滚动数组 也可以二维数组</span></span><br><span class="line">        n = <span class="built_in">len</span>(matrix)</span><br><span class="line">        dp = [[<span class="number">0</span>]*n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">        <span class="comment"># dp = [[0]*n for i in range(n)]</span></span><br><span class="line">        dp[<span class="number">0</span>] = [x <span class="keyword">for</span> x <span class="keyword">in</span> matrix[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                res = inf</span><br><span class="line">                <span class="keyword">if</span> y-<span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">                    res = <span class="built_in">min</span>(res,dp[<span class="number">0</span>][y-<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">if</span> y+<span class="number">1</span> &lt; n:</span><br><span class="line">                    res = <span class="built_in">min</span>(res,dp[<span class="number">0</span>][y+<span class="number">1</span>])</span><br><span class="line">                res = <span class="built_in">min</span>(res,dp[<span class="number">0</span>][y])</span><br><span class="line">                dp[<span class="number">1</span>][y] = res + matrix[x][y]</span><br><span class="line">            dp = [dp[<span class="number">1</span>],[<span class="number">0</span>]*n]</span><br><span class="line">            <span class="comment"># 滚动数组需要重复利用空间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(dp[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="官解"><a href="#官解" class="headerlink" title="官解"></a><a href="https://leetcode.cn/problems/minimum-falling-path-sum/solution/xia-jiang-lu-jing-zui-xiao-he-by-leetcod-vyww/">官解</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minFallingPathSum</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = [matrix[<span class="number">0</span>]]</span><br><span class="line">        n = <span class="built_in">len</span>(matrix)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            cur = [<span class="number">0</span>] * n</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                mn = dp[-<span class="number">1</span>][j]</span><br><span class="line">                <span class="keyword">if</span> j &gt; <span class="number">0</span>:</span><br><span class="line">                    mn = <span class="built_in">min</span>(mn, dp[-<span class="number">1</span>][j - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">if</span> j &lt; n - <span class="number">1</span>:</span><br><span class="line">                    mn = <span class="built_in">min</span>(mn, dp[-<span class="number">1</span>][j + <span class="number">1</span>])</span><br><span class="line">                cur[j] = mn + matrix[i][j]</span><br><span class="line">            dp.append(cur)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(dp[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.912ex" role="img" focusable="false" viewbox="0 -833.9 1036.6 844.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-7-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-7-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-7-TEX-I-1D45B"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-7-TEX-N-32"/></g></g></g></g></g></svg></mjx-container>)，需要计算每个坐标的和最小下降路径。<br>空间复杂度：O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.912ex" role="img" focusable="false" viewbox="0 -833.9 1036.6 844.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-3-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-3-TEX-I-1D45B"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"/></g></g></g></g></g></svg></mjx-container>)，需要记录每个坐标的和最小下降路径。<br>因为每个坐标的和最小下降路径仅与上一行有关，因此可以使用滚动数组，使得空间复杂度降低为 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-3-TEX-I-1D45B"/></g></g></g></g></svg></mjx-container>)。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode-medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
            <tag> LC周赛Q3 </tag>
            
            <tag> LeetCode1500 </tag>
            
            <tag> 二维dp </tag>
            
            <tag> 多点dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Blog实用工具</title>
      <link href="/post/d2b8e29c.html"/>
      <url>/post/d2b8e29c.html</url>
      
        <content type="html"><![CDATA[<h2 id="将网页转换为Markdown的方法-2023-07-12"><a href="#将网页转换为Markdown的方法-2023-07-12" class="headerlink" title="将网页转换为Markdown的方法 (2023.07.12)"></a>将网页转换为<code>Markdown</code>的方法 (2023.07.12)</h2><p>难度：<code>easy</code><br><a href="https://zhuanlan.zhihu.com/p/637848680">将HTML网页转换为Markdown格式的工具及方法</a><br><a href="https://microsoftedge.microsoft.com/addons/detail/markdownload-markdown-w/hajanaajapkhaabfcofdjgjnlgkdkknm">edge扩展地址</a><br><a href="https://products.aspose.app/html/zh/conversion/html-to-md">HTML 到 Markdown 转换器(不太实用)</a></p><h2 id="Markdown-在线编辑器-2023-07-12"><a href="#Markdown-在线编辑器-2023-07-12" class="headerlink" title="Markdown 在线编辑器 (2023.07.12)"></a><code>Markdown</code> 在线编辑器 (2023.07.12)</h2><p>难度：<code>easy</code><br><a href="https://c.runoob.com/front-end/712/">Markdown 在线编辑器</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002 大模型LLM-微调经验分享&amp;总结-知乎-刘聪NLP</title>
      <link href="/post/nlp002.html"/>
      <url>/post/nlp002.html</url>
      
        <content type="html"><![CDATA[<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a><strong>转载</strong></h2><p>本文转载于：<a href="https://zhuanlan.zhihu.com/p/620885226">知乎-刘聪NLP</a></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><strong>写在前面</strong></h2><p>大型语言模型横行，之前非常焦虑，现在全面拥抱。目前也有很多开源项目进行大模型微调等，笔者也做了一阵子大模型了，特此来介绍一下<code>ChatGLM-6B</code>模型微调经验，并汇总了一下目前开源项目&amp;数据。笔者与很多人微调结论不同，本人在采用单指令上进行模型微调，发现模型微调之后，<strong>「并没有出现灾难性遗忘现象」</strong>。</p><h2 id="ChatGLM-6B模型微调-关系抽取"><a href="#ChatGLM-6B模型微调-关系抽取" class="headerlink" title="ChatGLM-6B模型微调(关系抽取)"></a><strong><code>ChatGLM-6B</code>模型微调(关系抽取)</strong></h2><p>模型越大对显卡的要求越高，目前主流对大模型进行微调方法有三种：<code>Freeze方法</code>、<code>P-Tuning方法</code>和<code>Lora</code>方法。笔者也通过这三种方法，在信息抽取任务上，对<code>ChatGLM-6B</code>大模型进行模型微调。为了防止大模型的数据泄露，采用一个领域比赛数据集-<a href="https://link.zhihu.com/?target=https%3A//www.datafountain.cn/competitions/584">汽车工业故障模式关系抽取</a>，随机抽取50条作为测试集。</p><p>详细代码见上面的<code>GitHub</code>链接，并且也被<code>ChatGLM</code>官方收录。</p><p><img src="https://pic4.zhimg.com/v2-f048824d8732efb7bc97b27996d88f03_b.jpg" alt></p><h3 id="Freeze方法"><a href="#Freeze方法" class="headerlink" title="Freeze方法"></a><strong><code>Freeze方法</code></strong></h3><p><code>Freeze方法</code>，即参数冻结，对原始模型部分参数进行冻结操作，仅训练部分参数，以达到在单卡或不进行TP或PP操作，就可以对大模型进行训练。</p><p>微调代码，见<code>finetuning_freeze.py</code>，核心部分如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(nd <span class="keyword">in</span> name <span class="keyword">for</span> nd <span class="keyword">in</span> [<span class="string">&quot;layers.27&quot;</span>, \</span><br><span class="line">        <span class="string">&quot;layers.26&quot;</span>, <span class="string">&quot;layers.25&quot;</span>, <span class="string">&quot;layers.24&quot;</span>, <span class="string">&quot;layers.23&quot;</span>]):</span><br><span class="line">        param.requires_grad = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>针对模型不同层进行修改，可以自行修改。训练代码均采用<code>DeepSpeed</code>进行训练，可设置参数包含train_path、model_dir、num_train_epochs、train_batch_size、gradient_accumulation_steps、output_dir、prompt_text等，可根据自己的任务配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=0 DeepSpeed finetuning_freeze.py --num_train_epochs 5 </span><br><span class="line">    --train_batch_size 2</span><br></pre></td></tr></table></figure><p>三元组抽取的推理代码，见<code>predict_freeze.py</code>，其他任务可以根据自己的评价标准进行推理预测。</p><h3 id="P-Tuning方法"><a href="#P-Tuning方法" class="headerlink" title="P-Tuning方法"></a><strong>P-Tuning方法</strong></h3><p><code>P-Tuning方法</code>，参考<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/THUDM/&lt;code&gt;ChatGLM-6B&lt;/code&gt;/blob/main/ptuning/README.md">ChatGLM官方代码</a> ，是一种针对于大模型的<a href="#专有名词解释"><code>soft-prompt[1]</code></a>方法。</p><p><img src="https://pic2.zhimg.com/v2-0906021c2338dfe9c60de250c3965a55_b.jpg" alt></p><ul><li><a href="https://link.zhihu.com/?target=https%3A//arxiv.org/abs/2103.10385"><code>P-Tuning</code></a>，仅对大模型的<code>Embedding</code>加入新的参数。</li><li><a href="https://link.zhihu.com/?target=https%3A//arxiv.org/abs/2110.07602"><code>P-Tuning-V2</code></a>，将大模型的<code>Embedding</code>和每一层前都加上新的参数。</li></ul><p>微调代码，见<code>finetuning_pt.py<code>，核心部分如下：</code></code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config = ChatGLMConfig.from_pretrained(args.model_dir)</span><br><span class="line">config.pre_seq_len = args.pre_seq_len</span><br><span class="line">config.prefix_projection = args.prefix_projection</span><br><span class="line"></span><br><span class="line">model = ChatGLMForConditionalGeneration.from_pretrained(args.model_dir, config=config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(nd <span class="keyword">in</span> name <span class="keyword">for</span> nd <span class="keyword">in</span> [<span class="string">&quot;prefix_encoder&quot;</span>]):</span><br><span class="line">        param.requires_grad = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>当prefix_projection为True 时，为<code>P-Tuning-V2</code>方法，在大模型的<code>Embedding</code>和每一层前都加上新的参数；<br>当prefix_projection为False时，为<code>P-Tuning</code>方法， 仅在大模型的<code>Embedding</code>上新的参数。</p><p>可设置参数包含train_path、model_dir、num_train_epochs、train_batch_size、gradient_accumulation_steps、output_dir、prompt_text、pre_seq_len、prompt_text等， 可根据自己的任务配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=0 DeepSpeed finetuning_pt.py --num_train_epochs 5 </span><br><span class="line">     --train_batch_size 2 --pre_seq_len 16</span><br></pre></td></tr></table></figure><p>三元组抽取的推理代码，见<code>predict_pt.py</code>，其他任务可以根据自己的评价标准进行推理预测。</p><h3 id="Lora方法"><a href="#Lora方法" class="headerlink" title="Lora方法"></a><strong><code>Lora</code>方法</strong></h3><p><code>Lora</code>方法，即在大型语言模型上对指定参数增加额外的<code>低秩矩阵</code>，并在模型训练过程中，仅训练而外增加的参数。当“秩值”远小于原始参数维度时，新增的低秩矩阵参数量很小，达到仅训练很小的参数，就能获取较好的结果。</p><p><img src="https://pic1.zhimg.com/v2-e9965e231005d772d5ea5a6d2351fe60_b.jpg" alt></p><ul><li><code>Lora</code>论文：<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/abs/2106.09685">Paper</a></li><li>官方代码：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/microsoft/&lt;code&gt;Lora&lt;/code"><code>GitHub</code></a></li><li>HuggingFace封装的peft库：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/huggingface/peft"><code>GitHub</code></a></li></ul><p>微调代码，见<code>finetuning_Lora</code>.py，核心部分如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">model = ChatGLMForConditionalGeneration.from_pretrained(args.model_dir)</span><br><span class="line">config = LoraConfig(r=args.Lora_r,</span><br><span class="line">                    Lora_alpha=<span class="number">32</span>,</span><br><span class="line">                    target_modules=[<span class="string">&quot;query_key_value&quot;</span>],</span><br><span class="line">                    Lora_dropout=<span class="number">0.1</span>,</span><br><span class="line">                    bias=<span class="string">&quot;none&quot;</span>,</span><br><span class="line">                    task_type=<span class="string">&quot;CAUSAL_LM&quot;</span>,</span><br><span class="line">                    inference_mode=<span class="literal">False</span>,</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">model = get_peft_model(model, config)</span><br></pre></td></tr></table></figure><p>可设置参数包含train_path、model_dir、num_train_epochs、train_batch_size、gradient_accumulation_steps、output_dir、prompt_text、Lora_r等，可根据自己的任务配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=0 DeepSpeed finetuning_Lora.py --num_train_epochs 5 </span><br><span class="line">    --train_batch_size 2 --Lora_r 8</span><br></pre></td></tr></table></figure><p>三元组抽取的推理代码，见<code>predict_Lora.py</code>，其他任务可以根据自己的评价标准进行推理预测。</p><p>注意：对于结果需要保持一致的任务(即关掉dropout，解码关掉do_sample)，需要保存模型的adapter_config.json文件中，inference_mode参数修改成false，并将模型执行model.eval()操作。 主要原因是chatglm模型代码中，没有采用Conv1D函数。</p><h2 id="实验方法"><a href="#实验方法" class="headerlink" title="实验方法"></a><strong>实验方法</strong></h2><h3 id="三元组抽取"><a href="#三元组抽取" class="headerlink" title="三元组抽取"></a><strong>三元组抽取</strong></h3><ul><li>模型训练时，最大长度为768，Batch大小为2，训练轮数为5，fp16训练，采用<code>DeepSpeed</code>的<a href="#专有名词解释"><code>Zero-1[2]</code></a>训练；</li><li><code>P-Tuning V2</code>训练方法，<code>PT-Only-Embedding</code>表示仅对<code>Embedding</code>进行<code>soft-prompt</code>，<code>Freeze</code>仅训练模型后五层参数，<code>Lora</code>采用低秩矩阵方法训练，秩为<code>8</code>；</li><li>由于之前训练PT在48G-A40显卡上会出现<a href="#专有名词解释"><code>OOM[3]</code></a>，因此之前进行PT实验时对模型开启了<a href="#专有名词解释"><code>gradient_checkpointing_enable[4]</code></a>，使得模型显存占用变小，但训练时长增加。</li><li>训练示例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prompt_text：你现在是一个信息抽取模型，请你帮我抽取出关系内容为\&quot;性能故障\&quot;, </span><br><span class="line">             \&quot;部件故障\&quot;, \&quot;组成\&quot;和 \&quot;检测工具\&quot;的相关三元组，</span><br><span class="line">            三元组内部用\&quot;_\&quot;连接，三元组之间用\\n分割。文本：</span><br><span class="line">输入：故障现象：发动机水温高，风扇始终是低速转动，高速档不工作，开空调尤其如此。</span><br><span class="line">输出：发动机_部件故障_水温高\n风扇_部件故障_低速转动</span><br></pre></td></tr></table></figure><p>时间换空间，可用很好的解决显卡的资源问题，简单玩玩还可以，如果想要模型达到最优效果或可用快速看到效果，还不如租张A100卡，快速实验，推理阶段再用自己的小破卡。</p><p>下面实验结果均是在租的80G-A100上进行的实验，与<code>GitHub</code>里用的A40的实验结果会有些差异，主要在训练时长(纯训练速度，剔除模型保存的时间)。说实话，真的要训练一个大模型，多个A100是必不可少的，可以减少很多模型并行的操作，效果上也更好把控一些。</p><div class="table-container"><table><thead><tr><th style="text-align:center">微调方法</th><th style="text-align:center"><code>PT-Only-Embedding</code></th><th style="text-align:center"><code>P-Tuning V2</code></th><th style="text-align:center"><code>Freeze</code></th><th style="text-align:center"><code>Lora</code></th></tr></thead><tbody><tr><td style="text-align:center">显卡占用</td><td style="text-align:center">37G</td><td style="text-align:center">56G</td><td style="text-align:center">24G</td><td style="text-align:center">39G</td></tr><tr><td style="text-align:center">总参数</td><td style="text-align:center">6.259B</td><td style="text-align:center">7.211B</td><td style="text-align:center">6.255B</td><td style="text-align:center">6.259B</td></tr><tr><td style="text-align:center">可训练参数占比</td><td style="text-align:center">0.0586%</td><td style="text-align:center">13.26%</td><td style="text-align:center">16.10%</td><td style="text-align:center">0.0586%</td></tr><tr><td style="text-align:center">训练耗时</td><td style="text-align:center">20min</td><td style="text-align:center">52min</td><td style="text-align:center">46min</td><td style="text-align:center">25min</td></tr><tr><td style="text-align:center">测试结果F1</td><td style="text-align:center">0.0</td><td style="text-align:center">0.6283</td><td style="text-align:center">0.5675</td><td style="text-align:center">0.5359</td></tr></tbody></table></div><p>结果分析：</p><ul><li>效果为<code>P-Tuning V2</code> &gt; <code>Freeze</code> &gt; <code>Lora</code> &gt; <code>PT-Only-Embedding</code>;</li><li>速度为<code>PT-Only-Embedding</code> &gt; <code>Lora</code> &gt; <code>Freeze</code> &gt; <code>P-Tuning V2</code>;</li><li><strong><code>PT-Only-Embedding</code>效果很不理想，发现在训练时，最后的<code>loss</code>仅能收敛到2.几，而其他机制可以收敛到0.几。分析原因为，输出内容形式与原有语言模型任务相差很大，仅增加额外<code>Embedding</code>参数，不足以改变复杂的下游任务</strong>;</li><li><code>P-Tuning V2</code>方法占用显存更大，因为也增加了很多而外参数;</li><li>测试耗时，采用float16进行模型推理，由于其他方法均增加了额外参数，因此其他方法的推理耗时会比<code>Freeze方法</code>要高。当然由于是生成模型，所以生成的长度也会影响耗时;</li><li>模型在指定任务上微调之后，并没有丧失原有能力，例如生成“帮我写个快排算法”，依然可以生成-快排代码;</li><li><strong>由于大模型微调都采用大量<code>instruction</code>进行模型训练，仅采用单一的指令进行微调时，对原来其他的指令影响不大，因此并没导致原来模型的能力丧失</strong>;</li><li>上面测试仅代表个人测试结果。</li></ul><p>很多同学在微调后出现了灾难性遗忘现象，但我这边并没有出现，对“翻译任务”、“代码任务”、“问答任务”进行测试，采用freeze模型，可以用test_forgetting.py进行测试，具体测试效果如下：</p><ul><li>翻译任务</li></ul><p><img src="https://pic2.zhimg.com/v2-6d4d29a974c10411a915b51fb226e919_b.png" alt></p><ul><li>代码任务</li></ul><p><img src="https://pic4.zhimg.com/v2-bd9a3e20503f83d7f57b5dabf98fef43_b.jpg" alt></p><ul><li>问答任务</li></ul><p><img src="https://pic4.zhimg.com/v2-b0901617f0084a1bffdeeb1961fc05d3_b.png" alt></p><p>后面会把生成任务、分类任务做完，请持续关注<code>GitHub</code>，会定期更新。（太忙了，会抓紧时间更新，并且官方代码也在持续更新，如遇到代码代码调不通的情况，请及时联系我，我在<code>GitHub</code>也给出了我的代码版本和模型版本）</p><h3 id="文本生成"><a href="#文本生成" class="headerlink" title="文本生成"></a><strong>文本生成</strong></h3><ul><li>为了防止大模型的数据泄露，采用一个“万创杯”中医药天池大数据竞赛-<a href="https://link.zhihu.com/?target=https%3A//tianchi.aliyun.com/competition/entrance/531826/introduction">中医文献问题生成挑战</a>，随机抽取20条作为测试集</li><li>PT为官方的<code>P-Tuning V2</code>训练方法，<code>PT-Only-Embedding</code>表示仅对<code>Embedding</code>进行<code>soft-prompt</code>，<code>Freeze</code>仅训练模型后五层参数，<code>Lora</code>采用低秩矩阵方法训练，秩为<code>8</code>；</li><li>训练示例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prompt_text：你现在是一个问题生成模型，请根据下面文档生成一个问题，文档：</span><br><span class="line">输入：紫色红薯是近年从日本引进的新品种红薯，中国农业大学农学与生物技术学院副院长刘庆昌指出，</span><br><span class="line">      紫薯中的花青素具有显著的抗生物氧化作用，在延缓人体衰老方面具有非常好的效果。</span><br><span class="line">      紫薯中所含赖氨酸、铜、锰、钾、锌的含量高于一般红薯5-8倍，尤其是抗癌物质碘、</span><br><span class="line">      硒的含量比其他红薯高出20倍以上，占食物中的第一位。</span><br><span class="line">输出：紫薯和红薯吃哪个好？</span><br></pre></td></tr></table></figure><p>模型训练，以<code>Freeze方法</code>为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=0 <span class="built_in">nohup</span> DeepSpeed --master_port 5555 finetuning_freeze.py </span><br><span class="line">        --train_path <span class="string">&quot;data/d2q_0.json&quot;</span> </span><br><span class="line">        --output_dir <span class="string">&quot;output_dir_freeze/&quot;</span> </span><br><span class="line">        --prompt_text <span class="string">&quot;你现在是一个问题生成模型，请根据下面文档生成一个问题，文档：&quot;</span> </span><br><span class="line">        &gt; log_fz.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>由于生成模型的内容不能想信息抽取任务一样评价，用现有的BLUE或者Rouge来评价也是不合适，因此制定了评分规则。 通过多样性和准确性两个角度判断D2Q模型好坏，每个样本总计5分，共20个样本。</p><ul><li><p>多样性：</p></li><li><p>问题是否高度相似，每重复一个问题扣0.25分；</p></li><li><p>问题对应答案是否相同，每有一个重复答案或找不到答案，扣0.25分；</p></li><li><p>准确性：</p></li><li><p>问题能否从文档中找到答案，每有一个找不到答案，扣0.25分；</p></li><li>问题内容是否流畅，每有一个问题不流畅，扣0.25分；</li><li>问题内容是否有害，每有一个有害，扣0.25分；</li></ul><p>测试数据见d2q_result_data/，测试代码见predict_d2q.py</p><div class="table-container"><table><thead><tr><th style="text-align:center">微调方法</th><th style="text-align:center">原始模型</th><th style="text-align:center"><code>PT-Only-Embedding</code></th><th style="text-align:center"><code>P-Tuning V2</code></th><th style="text-align:center"><code>Freeze</code></th><th style="text-align:center"><code>Lora</code></th></tr></thead><tbody><tr><td style="text-align:center">分数</td><td style="text-align:center">51.75</td><td style="text-align:center">73.75</td><td style="text-align:center">87.75</td><td style="text-align:center">79.25</td><td style="text-align:center">86.75</td></tr></tbody></table></div><h2 id="中文开源大模型-amp-项目"><a href="#中文开源大模型-amp-项目" class="headerlink" title="中文开源大模型&amp;项目"></a><strong>中文开源大模型&amp;项目</strong></h2><p>虽然出来很多大模型，但Open的&amp;中文可直接使用的并不多，下面对中文开源大模型、数据集和项目进行一下汇总。</p><p><img src="https://pic2.zhimg.com/v2-3422e1fd8f182d35418d30216a079905_b.jpg" alt></p><h3 id="中文开源大模型"><a href="#中文开源大模型" class="headerlink" title="中文开源大模型"></a><strong>中文开源大模型</strong></h3><p>直接可微调，<code>无需指令增量训练</code>：</p><ul><li><code>ChatGLM-6B</code>：<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/THUDM/&lt;code&gt;ChatGLM-6B&lt;/code">模型地址</a></li><li><code>ChatYuan-large-v2</code>：<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/ClueAI/ChatYuan-large-v2">模型地址</a></li></ul><p>原始模型多语言or英文，<code>需要中文指令数据集+增量训练</code>：</p><ul><li><code>BloomZ</code>：<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/bigscience/bloomz">模型地址</a></li><li><code>LLama</code>：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/facebookresearch/llama">模型地址</a></li><li><code>Flan-T5</code>：<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/google/flan-t5-xxl">模型地址</a></li><li><code>OPT</code>：<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/facebook/opt-66b">模型地址</a></li></ul><h3 id="中文开源指令数据"><a href="#中文开源指令数据" class="headerlink" title="中文开源指令数据"></a><strong>中文开源指令数据</strong></h3><p>下面中文指令集，大多数从Alpaca翻译而来，请看下面项目中data目录。目前通过ChatGPT或者GPT4作为廉价标注工为自己的数据进行数据标注一个不错的思路。</p><ul><li>[1]：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/LC1332/Chinese-alpaca-&lt;code&gt;Lora&lt;/code">数据地址</a></li><li>[2]：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/hikariming/alpaca_chinese_dataset">数据地址</a></li><li>[3]：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/carbonz0/alpaca-chinese-dataset">数据地址</a></li><li>[4]：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/Instruction-Tuning-with-GPT-4/GPT-4-LLM">数据地址</a></li><li>[5]：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/LianjiaTech/BELLE">数据地址</a></li><li>[6]：<a href="https://link.zhihu.com/?target=https%3A//huggingface.co/datasets/JosephusCheung/GuanacoDataset">数据地址</a></li></ul><h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a><strong>开源项目</strong></h3><p>总结下面较火的开源项目：</p><ul><li><code>BELLE</code>：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/LianjiaTech/BELLE">项目地址</a></li><li><code>ChatGLM</code>：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/THUDM/&lt;code&gt;ChatGLM-6B&lt;/code">项目地址</a></li><li><code>Luotuo-Chinese-LLM</code>：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/LC1332/Luotuo-Chinese-LLM">项目地址</a></li><li><code>stanford_alpaca</code>：<a href="https://link.zhihu.com/?target=https%3A//&lt;code&gt;GitHub&lt;/code&gt;.com/tatsu-lab/stanford_alpaca">项目地址</a></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>目前各大厂的大模型陆陆续续放出，堪称百家争鸣！个人玩家也是全面拥抱，想尽一切办法来训练微调大模型。只愿大家以后可以实现“大模型”自由。愿再无“model-as-a-service”。</p><h2 id="专有名词解释"><a href="#专有名词解释" class="headerlink" title="专有名词解释"></a><strong>专有名词解释</strong></h2><h3 id="soft-prompt方法"><a href="#soft-prompt方法" class="headerlink" title="soft-prompt方法"></a><code>soft-prompt方法</code></h3><p>是一种用于生成文本的技术。在自然语言处理中，生成文本是指根据给定的输入生成相关的文本输出。<code>soft-prompt</code>方法是一种生成文本的方法，它使用给定的软提示（soft prompt）来指导生成的文本。<br>软提示是一种对生成文本的要求或指导。它可以是一个短语、一个问题或一个主题。软提示提供了一定的上下文，帮助模型理解要生成的文本应该具有的特定特征或内容。通过提供软提示，可以引导模型生成与提示相关的文本。<br><code>soft-prompt</code>方法可以应用于各种生成文本的任务，如机器翻译、文本摘要、对话系统等。它可以提高生成文本的质量和相关性，使得生成的文本更符合预期的要求。<br>软提示方法与传统的生成文本方法相比，具有更大的灵活性和可控性。通过调整软提示的内容和形式，可以对生成的文本进行更精确的控制，使其满足特定的需求或要求。这使得软提示方法成为生成文本领域中的一种重要技术。</p><h3 id="DeepSpeed的Zero-1"><a href="#DeepSpeed的Zero-1" class="headerlink" title="DeepSpeed的Zero-1"></a><code>DeepSpeed的Zero-1</code></h3><p><code>DeepSpeed</code>的<code>Zero-1</code>是一个优化训练大型模型的技术。<code>DeepSpeed</code>是一个开源的深度学习优化库，可以显著提高训练速度和模型规模。<code>Zero-1</code>是<code>DeepSpeed</code>中的一种优化技术，专门用于减少模型参数的内存占用和通信开销。<br><code>Zero-1通过将模型参数分成多个小块，只在每个小块上进行计算和通信，从而减少了每次计算和通信的数据量。</code>这种方式可以有效地降低模型参数的内存占用和通信开销，特别适用于训练大型模型。<br>通过使用<code>Zero-1</code>，<code>DeepSpeed</code>可以在<code>不增加额外计算和通信开销的情况下，将模型规模扩展到更大的尺寸</code>。这对于训练更复杂的模型和处理更大规模的数据集非常有帮助。同时，<code>Zero-1</code>还可以提高训练速度，因为减少了每次计算和通信的数据量，从而减少了训练的总体时间。<br>总之，<code>DeepSpeed</code>的<code>Zero-1</code>是一种优化技术，通过减少模型参数的内存占用和通信开销，可以提高训练大型模型的效率和速度。</p><h3 id="出现OOM的原因和解决方法"><a href="#出现OOM的原因和解决方法" class="headerlink" title="出现OOM的原因和解决方法"></a><code>出现OOM的原因和解决方法</code></h3><p><code>OOM</code>是<code>Out of Memory</code>的缩写，指的是内存不足。在深度学习训练中，<code>OOM</code>通常是由以下原因引起的：</p><ol><li>模型复杂度高：深度学习模型通常包含大量的参数和层，需要大量的内存来存储模型的权重和中间计算结果。如果模型过于复杂，超出了可用内存的限制，就会出现<code>OOM</code>。</li><li>批量大小过大：在深度学习训练中，通常会将训练数据划分为小批量进行处理。每个批量的数据会被同时输入到模型中进行计算，因此批量大小会直接影响内存的使用。如果批量大小设置过大，超出了可用内存的限制，就会出现OOM。</li><li>图像分辨率过高：在图像处理任务中，高分辨率的图像会占用更多的内存。如果输入的图像分辨率过高，超出了可用内存的限制，就会出现<code>OOM</code>。</li><li>内存泄漏：内存泄漏是指程序在运行过程中无法释放已经分配的内存，导致内存占用不断增加。如果深度学习训练过程中存在内存泄漏问题，最终会导致内存不足而出现<code>OOM</code>。</li></ol><p>为解决<code>OOM</code>问题，可以采取以下措施：</p><ol><li>减小模型复杂度：可以尝试减少模型的参数量或层数，以降低内存需求。</li><li>减小批量大小：可以尝试减小每个批量的数据量，以降低内存需求。但需要注意，较小的批量大小可能会影响训练的效果。</li><li>降低图像分辨率：可以尝试将输入图像的分辨率降低，以减少内存占用。</li><li>检查和修复内存泄漏问题：可以通过代码审查和内存分析工具来检查是否存在内存泄漏问题，并进行修复。</li><li>使用更大的内存或分布式训练：如果以上措施无法解决<code>OOM</code>问题，可以考虑增加可用内存的限制，例如使用更大内存的计算设备或采用分布式训练的方式。</li></ol><h3 id="gradient-checkpointing-enable梯度检查点技术"><a href="#gradient-checkpointing-enable梯度检查点技术" class="headerlink" title="gradient_checkpointing_enable梯度检查点技术"></a><code>gradient_checkpointing_enable梯度检查点技术</code></h3><p>是一个参数或选项，用于启用梯度检查点技术。梯度检查点技术是一种优化方法，用于<code>减少计算图中的内存消耗</code>，特别适用于深度学习模型中的大型计算图。<br>在训练过程中，计算图中的每个操作都会保存其梯度信息，以便在反向传播时使用。然而，对于具有大量参数和层的模型，这些梯度信息可能会占用大量内存。<br>梯度检查点技术通过在<code>计算图中的某些操作处保存中间状态，而不是保存所有操作的梯度信息</code>，来减少内存消耗。<br>这样，在反向传播过程中，只需要重新计算<code>从检查点开始的操作的梯度，而不是重复计算整个计算图的梯度。</code><br>通过启用<code>gradient_checkpointing_enable</code>，可以在训练过程中使用梯度检查点技术来减少内存消耗。</p>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chatgpt </tag>
            
            <tag> p-tuning </tag>
            
            <tag> p-tuningv2 </tag>
            
            <tag> loRA </tag>
            
            <tag> DeepSpeed </tag>
            
            <tag> Zero </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC15. 三数之和</title>
      <link href="/post/LC15.html"/>
      <url>/post/LC15.html</url>
      
        <content type="html"><![CDATA[<p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>nums = [-1,0,1,2,-1,-4]<strong>输出：</strong>[[-1,-1,2],[-1,0,1]]<strong>解释：</strong>nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。注意，输出的顺序和三元组的顺序并不重要。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>nums = [0,1,1]<strong>输出：</strong>[]<strong>解释：</strong>唯一可能的三元组和不为 0 。</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>nums = [0,0,0]<strong>输出：</strong>[[0,0,0]]<strong>解释：</strong>唯一可能的三元组和为 0 。</pre><p><strong>提示：</strong></p><p><ul>    <li><code>3 &lt;= nums.length &lt;= 3000</code></li>    <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li></ul></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>根据范围，复杂度最多 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="6.553ex" height="2.351ex" role="img" focusable="false" viewbox="0 -833.9 2896.6 1038.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-2-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path id="MJX-2-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/><path id="MJX-2-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/><path id="MJX-2-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-2-TEX-N-32"/></g></g><g data-mml-node="mi" transform="translate(1036.6,0)"><use data-c="1D459" xlink:href="#MJX-2-TEX-I-1D459"/></g><g data-mml-node="mi" transform="translate(1334.6,0)"><use data-c="1D45C" xlink:href="#MJX-2-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(1819.6,0)"><use data-c="1D454" xlink:href="#MJX-2-TEX-I-1D454"/></g><g data-mml-node="mi" transform="translate(2296.6,0)"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"/></g></g></g></g></svg></mjx-container>)，因此可以参考的方法复杂度有O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.912ex" role="img" focusable="false" viewbox="0 -833.9 1036.6 844.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"/></g></g></g></g></g></svg></mjx-container>)，O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="5.566ex" height="2.034ex" role="img" focusable="false" viewbox="0 -694 2460 899" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-1-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/><path id="MJX-1-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/><path id="MJX-1-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"/></g><g data-mml-node="mi" transform="translate(600,0)"><use data-c="1D459" xlink:href="#MJX-1-TEX-I-1D459"/></g><g data-mml-node="mi" transform="translate(898,0)"><use data-c="1D45C" xlink:href="#MJX-1-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(1383,0)"><use data-c="1D454" xlink:href="#MJX-1-TEX-I-1D454"/></g><g data-mml-node="mi" transform="translate(1860,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"/></g></g></g></g></svg></mjx-container>)</p><h2 id="排序-双指针"><a href="#排序-双指针" class="headerlink" title="排序+双指针"></a>排序+双指针</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        nums.sort()</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            l,r = i+<span class="number">1</span>,<span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> l &lt; r:</span><br><span class="line">                <span class="keyword">if</span> nums[i]+nums[l]+nums[r] == <span class="number">0</span>:</span><br><span class="line">                    ans.append([nums[i],nums[l],nums[r]])  </span><br><span class="line">                    pre_l,pre_r = l,r </span><br><span class="line">                    <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[l] == nums[pre_l]:</span><br><span class="line">                        l+=<span class="number">1</span></span><br><span class="line">                    r-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[i]+nums[l]+nums[r] &lt; <span class="number">0</span>:</span><br><span class="line">                    l+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    r-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="哈希字典"><a href="#哈希字典" class="headerlink" title="哈希字典"></a>哈希字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">        d[x] = d.get(x,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">    <span class="comment">###此处ab均是去重后的</span></span><br><span class="line">    a = [x <span class="keyword">for</span> x <span class="keyword">in</span> d <span class="keyword">if</span> x &gt; <span class="number">0</span>]</span><br><span class="line">    b = [x <span class="keyword">for</span> x <span class="keyword">in</span> d <span class="keyword">if</span> x &lt;= <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> d.get(<span class="number">0</span>,<span class="number">0</span>) &gt; <span class="number">2</span>:</span><br><span class="line">        ans.append([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> b:</span><br><span class="line">            target = -(i+j)</span><br><span class="line">            <span class="keyword">if</span> target <span class="keyword">in</span> d:</span><br><span class="line">                <span class="keyword">if</span> target == i <span class="keyword">and</span> d[target] &gt; <span class="number">1</span>:</span><br><span class="line">                    ans.append([i,i,j])</span><br><span class="line">                <span class="keyword">if</span> target == j <span class="keyword">and</span> d[target] &gt; <span class="number">1</span>:</span><br><span class="line">                    ans.append([i,j,j])</span><br><span class="line">                <span class="comment">###下一个if条件要注意，如果是在(i,j)区间，得b&gt;0</span></span><br><span class="line">                <span class="comment">###主要是为了去重，如果是在(taget,i)和(j,target)得b&gt;=0</span></span><br><span class="line">                <span class="keyword">if</span> target &gt; i <span class="keyword">or</span> target &lt; j:</span><br><span class="line">                    ans.append([i,j,target])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="comment">###大神答案</span></span><br><span class="line">        <span class="comment">###先考虑重复大于1次的</span></span><br><span class="line">        <span class="comment">###再考虑通过bisect二分查找去寻找</span></span><br><span class="line">        ans = []</span><br><span class="line">        counts = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            counts[i] = counts.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        nums = <span class="built_in">sorted</span>(counts)</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> counts[num] &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> counts[num] &gt; <span class="number">2</span>:</span><br><span class="line">                        ans.append([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> -num * <span class="number">2</span> <span class="keyword">in</span> counts:</span><br><span class="line">                        ans.append([num, num, -<span class="number">2</span> * num])</span><br><span class="line">            <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">                two_sum = -num</span><br><span class="line">                left = bisect.bisect_left(nums, (two_sum - nums[-<span class="number">1</span>]), i + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> nums[left: bisect.bisect_right(nums, (two_sum // <span class="number">2</span>), left)]:</span><br><span class="line">                    j = two_sum - i</span><br><span class="line">                    <span class="keyword">if</span> j <span class="keyword">in</span> counts <span class="keyword">and</span> j != i:</span><br><span class="line">                        ans.append([num, i, j])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="comment">#hash表</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        d  = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span>(d.keys()):</span><br><span class="line">                d[nums[i]] = [i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d[nums[i]].append(i)</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> i&gt;=<span class="number">1</span> <span class="keyword">and</span> nums[i-<span class="number">1</span>]==nums[i]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                    <span class="keyword">if</span> flag <span class="keyword">and</span> j&gt;<span class="number">1</span> <span class="keyword">and</span> nums[j-<span class="number">1</span>]==nums[j]:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        x = -<span class="number">1</span>*(nums[i]+nums[j])</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            <span class="comment">###这里不判断tmp是否在d中出现过，要不然时间复杂度更高，用try能够省时间</span></span><br><span class="line">                            idx = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> d[x] <span class="keyword">if</span> _ &gt; j]</span><br><span class="line">                            <span class="keyword">if</span> <span class="built_in">len</span>(idx):</span><br><span class="line">                                ans.append([nums[i],nums[j],x])</span><br><span class="line">                                flag = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
            <tag> 哈希 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC2178. 拆分成最多数目的正偶数之和</title>
      <link href="/post/LC2178.html"/>
      <url>/post/LC2178.html</url>
      
        <content type="html"><![CDATA[<p>给你一个整数&nbsp;<code>finalSum</code>&nbsp;。请你将它拆分成若干个&nbsp;<strong>互不相同</strong> 的正偶数之和，且拆分出来的正偶数数目&nbsp;<strong>最多</strong>&nbsp;。</p><ul>    <li>比方说，给你&nbsp;<code>finalSum = 12</code>&nbsp;，那么这些拆分是&nbsp;<strong>符合要求</strong> 的（互不相同的正偶数且和为&nbsp;<code>finalSum</code>）：<code>(2 + 10)</code>&nbsp;，<code>(2 + 4 + 6)</code>&nbsp;和&nbsp;<code>(4 + 8)</code>&nbsp;。它们中，<code>(2 + 4 + 6)</code>&nbsp;包含最多数目的整数。注意&nbsp;<code>finalSum</code>&nbsp;不能拆分成&nbsp;<code>(2 + 2 + 4 + 4)</code>&nbsp;，因为拆分出来的整数必须互不相同。</li></ul><p>请你返回一个整数数组，表示将整数拆分成 <strong>最多</strong> 数目的正偶数数组。如果没有办法将&nbsp;<code>finalSum</code>&nbsp;进行拆分，请你返回一个&nbsp;<strong>空</strong>&nbsp;数组。你可以按 <b>任意</b>&nbsp;顺序返回这些整数。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><b>输入：</b>finalSum = 12<b>输出：</b>[2,4,6]<b>解释：</b>以下是一些符合要求的拆分：<code>(2 + 10)<span style>，</span></code><code>(2 + 4 + 6) </code>和 <code>(4 + 8) 。</code>(2 + 4 + 6) 为最多数目的整数，数目为 3 ，所以我们返回 [2,4,6] 。[2,6,4] ，[6,2,4] 等等也都是可行的解。</pre><p><strong>示例 2：</strong></p><pre><b>输入：</b>finalSum = 7<b>输出：</b>[]<b>解释：</b>没有办法将 finalSum 进行拆分。所以返回空数组。</pre><p><strong>示例 3：</strong></p><pre><b>输入：</b>finalSum = 28<b>输出：</b>[6,8,2,12]<b>解释：</b>以下是一些符合要求的拆分：<code>(2 + 26)<span style>，</span></code><code>(6 + 8 + 2 + 12)</code> 和 <code>(4 + 24) 。</code><code>(6 + 8 + 2 + 12)</code> 有最多数目的整数，数目为 4 ，所以我们返回 [6,8,2,12] 。[10,2,4,12] ，[6,2,4,16] 等等也都是可行的解。</pre><p>&nbsp;</p><p><strong>提示：</strong></p><p><ul>    <li><code>1 &lt;= finalSum &lt;= 10<sup>10</sup></code></li></ul></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>偶数总能分解成若干个偶数，因为要分解的够多，所以从<code>2</code>开始枚举<br>注：每次枚举<code>2,4,6</code>,同时判断<code>finalSum - start</code>是否已经访问过了，如果访问过了则跳过<br>如果<code>finalSum - start = start</code>也需要进行判断<br>如果是奇数直接返回<code>[]</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximumEvenSplit</span>(<span class="params">self, finalSum: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="comment"># 贪心 </span></span><br><span class="line">        <span class="comment"># 每次从2开始进行选取</span></span><br><span class="line">        <span class="keyword">if</span> finalSum%<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        se = <span class="built_in">set</span>()</span><br><span class="line">        start = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> finalSum &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> finalSum != <span class="number">2</span>*start <span class="keyword">and</span> finalSum - start <span class="keyword">not</span> <span class="keyword">in</span> se:</span><br><span class="line">                se.add(start)</span><br><span class="line">                finalSum -= start</span><br><span class="line">            start +=<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(se)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="官方代码"><a href="#官方代码" class="headerlink" title="官方代码"></a><a href="https://leetcode.cn/problems/maximum-split-of-positive-even-integers/solution/chai-fen-cheng-zui-duo-shu-mu-de-ou-zhen-dntf/">官方代码</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximumEvenSplit</span>(<span class="params">self, finalSum: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> finalSum % <span class="number">2</span> &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        i = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= finalSum:</span><br><span class="line">            res.append(i)</span><br><span class="line">            finalSum -= i</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">        <span class="comment"># 10 &lt; 8 不符合，则将8+res[-1]</span></span><br><span class="line">        res[-<span class="number">1</span>] += finalSum</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.491ex;" xmlns="http://www.w3.org/2000/svg" width="3.287ex" height="2.398ex" role="img" focusable="false" viewbox="0 -843 1453 1060" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-N-221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"/><path id="MJX-3-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-3-TEX-N-200B" d=""/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-3-TEX-I-1D45B"/></g></g><g data-mml-node="mo" transform="translate(0,-17)"><use data-c="221A" xlink:href="#MJX-3-TEX-N-221A"/></g><rect width="600" height="60" x="853" y="723"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1453,0)"><g data-mml-node="mo"><use data-c="200B" xlink:href="#MJX-3-TEX-N-200B"/></g></g></g></g></g></svg></mjx-container>)，即为拆分后的整数个数，其中 <code>n=finalSum</code><br>空间复杂度：O(1)，输出数组不计入空间复杂度。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode-medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
            <tag> LC周赛Q3 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> LeetCode1500 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode周赛打卡记录</title>
      <link href="/post/LeetCodeContest.html"/>
      <url>/post/LeetCodeContest.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://clist.by/coder/michealxie94/"><img src="/post/LeetCodeContest/clist.png" class title="img"></a></p><div class="table-container"><table><thead><tr><th style="text-align:left">日期</th><th style="text-align:center">竞赛</th><th style="text-align:center">竞赛分数/Δ</th><th style="text-align:center">rank/总人数</th><th style="text-align:center">百分比</th><th style="text-align:center">得分/总分</th><th style="text-align:center">Knight/Guardian</th></tr></thead><tbody><tr><td style="text-align:left">2023-07-09</td><td style="text-align:center"><a href="https://leetcode.cn/contest/weekly-contest-353/">weekly-353</a></td><td style="text-align:center"><code>1699/+33</code></td><td style="text-align:center">1083 / 4112</td><td style="text-align:center">前26.33%</td><td style="text-align:center"><code>12/17</code></td><td style="text-align:center">/</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">分数</th><th style="text-align:center">难度</th><th style="text-align:left">题号</th><th style="text-align:center">AC time</th><th style="text-align:center">思路</th><th style="text-align:center">备  注</th></tr></thead><tbody><tr><td style="text-align:left">3</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2769.html">2769. 找出最大的可达成数字</a></td><td style="text-align:center">0:01:42</td><td style="text-align:center">数学、模拟</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">4</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2770.html">2770. 达到末尾下标所需的最大跳跃次数</a></td><td style="text-align:center">0:09:37</td><td style="text-align:center">线性dp</td><td style="text-align:center">WA1次<p>(贪心 or dp优先考虑贪心)</p></td></tr><tr><td style="text-align:left">5</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2771.html">2771. 构造最长非递减子数组</a></td><td style="text-align:center">0:34:07</td><td style="text-align:center">二维dp</td><td style="text-align:center">WA2次</td></tr><tr><td style="text-align:left">5</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2772.html">2772. 使数组中的所有元素都等于零</a></td><td style="text-align:center"></td><td style="text-align:center">差分 or 线段树</td><td style="text-align:center">暴力超时/区间修改</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">日期</th><th style="text-align:center">竞赛</th><th style="text-align:center">竞赛分数/Δ</th><th style="text-align:center">rank/总人数</th><th style="text-align:center">百分比</th><th style="text-align:center">得分/总分</th></tr></thead><tbody><tr><td style="text-align:left">2023-07-08</td><td style="text-align:center"><a href="https://leetcode.cn/contest/biweekly-contest-108/">biweekly-108</a></td><td style="text-align:center"><code>1666/+8</code></td><td style="text-align:center">1058 / 2349</td><td style="text-align:center">前45.04%</td><td style="text-align:center"><code>7/16</code></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">分数</th><th style="text-align:center">难度</th><th style="text-align:left">题号</th><th style="text-align:center">AC time</th><th style="text-align:center">思路</th><th style="text-align:center">备  注</th></tr></thead><tbody><tr><td style="text-align:left">3</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2765.html">2765. 最长交替子序列</a></td><td style="text-align:center">0:11:29</td><td style="text-align:center">模拟</td><td style="text-align:center">WA3次</td></tr><tr><td style="text-align:left">4</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2766.html">2766. 重新放置石块</a></td><td style="text-align:center">0:17:11</td><td style="text-align:center">模拟</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">4</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2767.html">2767. 将字符串分割为最少的美丽子字符串</a></td><td style="text-align:center">01:31:00</td><td style="text-align:center"></td><td style="text-align:center">考试结束1分钟debug出来<p>5的幂次方和5的倍数混淆</p></td></tr><tr><td style="text-align:left">5</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2768.html">2768. 黑格子的数目</a></td><td style="text-align:center"></td><td style="text-align:center">哈希+思维题</td><td style="text-align:center">暴力超时，没有利用数组信息</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">日期</th><th style="text-align:center">竞赛</th><th style="text-align:center">竞赛分数/Δ</th><th style="text-align:center">rank/总人数</th><th style="text-align:center">百分比</th><th style="text-align:center">得分/总分</th><th style="text-align:center">Knight/Guardian</th></tr></thead><tbody><tr><td style="text-align:left">2023-07-02</td><td style="text-align:center"><a href="https://leetcode.cn/contest/weekly-contest-352/">weekly-352</a></td><td style="text-align:center"><code>1658/+87</code></td><td style="text-align:center">395 / 3437</td><td style="text-align:center">前11.49%</td><td style="text-align:center"><code>13/18</code></td><td style="text-align:center"><code>1884/2260</code></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">分数</th><th style="text-align:center">难度<code>7141</code></th><th style="text-align:left">题号</th><th style="text-align:center">AC time</th><th style="text-align:center">思路</th><th style="text-align:center">备  注</th></tr></thead><tbody><tr><td style="text-align:left">3</td><td style="text-align:center">1420</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2760.html">2760. 最长奇偶子数组</a></td><td style="text-align:center">0:17:56</td><td style="text-align:center">模拟</td><td style="text-align:center">WA2次</td></tr><tr><td style="text-align:left">4</td><td style="text-align:center">1504</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2761.html">2761. 和等于目标值的质数对</a></td><td style="text-align:center">0:46:32</td><td style="text-align:center">质数+类外预处理</td><td style="text-align:center">WA4次</td></tr><tr><td style="text-align:left">5</td><td style="text-align:center">1940</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2762.html">2762. 不间断子数组</a></td><td style="text-align:center"></td><td style="text-align:center">滑动窗口<p><code>树状数组+线段树没解决</code></p></td><td style="text-align:center">没思路，以为是线段树</td></tr><tr><td style="text-align:left">6</td><td style="text-align:center">2277</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2763.html">2763. 所有子数组中不平衡数字之和</a></td><td style="text-align:center">1:28:07</td><td style="text-align:center">O(n^2logn)、O(n^2)<p><code>O(n)贡献法没解决</code></p></td><td style="text-align:center">WA1次</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">日期</th><th style="text-align:center">竞赛</th><th style="text-align:center">竞赛分数/Δ</th><th style="text-align:center">rank/总人数</th><th style="text-align:center">百分比</th><th style="text-align:center">得分/总分</th><th style="text-align:center">Knight/Guardian</th></tr></thead><tbody><tr><td style="text-align:left">2023-06-25</td><td style="text-align:center"><a href="https://leetcode.cn/contest/weekly-contest-351/">weekly-351</a></td><td style="text-align:center"><code>1571/-1</code></td><td style="text-align:center">1360 / 2471</td><td style="text-align:center">前55.03%</td><td style="text-align:center"><code>3/17</code></td><td style="text-align:center"><code>1883/2260</code></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">分数</th><th style="text-align:center">难度<code>7123</code></th><th style="text-align:left">题号</th><th style="text-align:center">AC time</th><th style="text-align:center">思路</th><th style="text-align:center">备  注</th></tr></thead><tbody><tr><td style="text-align:left">3</td><td style="text-align:center">1301</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2748.html">2748. 美丽下标对的数目</a></td><td style="text-align:center">0:03:25</td><td style="text-align:center">暴力</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">4</td><td style="text-align:center">2132</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2749.html">2749. 得到整数零需要执行的最少操作数</a></td><td style="text-align:center"></td><td style="text-align:center">思维题+位运算+细节处理</td><td style="text-align:center">最后一个测试点被卡<p>卡20分钟需要跳过，不按难度顺序出题</p></td></tr><tr><td style="text-align:left">4</td><td style="text-align:center">1598</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2750.html">2750. 将数组划分成若干好子数组的方式</a></td><td style="text-align:center"></td><td style="text-align:center">乘法运算</td><td style="text-align:center">没时间</td></tr><tr><td style="text-align:left">6</td><td style="text-align:center">2092</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2751.html">2751. 机器人碰撞</a></td><td style="text-align:center"></td><td style="text-align:center">栈</td><td style="text-align:center">没时间</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">日期</th><th style="text-align:center">竞赛</th><th style="text-align:center">竞赛分数/Δ</th><th style="text-align:center">rank/总人数</th><th style="text-align:center">百分比</th><th style="text-align:center">得分/总分</th></tr></thead><tbody><tr><td style="text-align:left">2023-06-24</td><td style="text-align:center"><a href="https://leetcode.cn/contest/biweekly-contest-107/">biweekly-107</a></td><td style="text-align:center"><code>1572/-6</code></td><td style="text-align:center">1026 / 1870</td><td style="text-align:center">前54.86%</td><td style="text-align:center"><code>7/17</code></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">分数</th><th style="text-align:center">难度<code>7231</code></th><th style="text-align:left">题号</th><th style="text-align:center">AC time</th><th style="text-align:center">思路</th><th style="text-align:center">备  注</th></tr></thead><tbody><tr><td style="text-align:left">3</td><td style="text-align:center">1406</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2744.html">2744. 最大字符串配对数目</a></td><td style="text-align:center">0:02:10</td><td style="text-align:center">暴力</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">4</td><td style="text-align:center">1607</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2745.html">2745. 构造最长的新字符串</a></td><td style="text-align:center">0:46:30</td><td style="text-align:center">思维题</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">4</td><td style="text-align:center">2126</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2746.html">2746. 字符串连接删减字母</a></td><td style="text-align:center"></td><td style="text-align:center"><code>没解决</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">6</td><td style="text-align:center">2092</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2747.html">2747. 统计没有收到请求的服务器数目</a></td><td style="text-align:center"></td><td style="text-align:center"><code>没解决</code>离线查询</td><td style="text-align:center">暴力超时</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">日期</th><th style="text-align:center">竞赛</th><th style="text-align:center">竞赛分数/Δ</th><th style="text-align:center">rank/总人数</th><th style="text-align:center">百分比</th><th style="text-align:center">得分/总分</th><th style="text-align:center">Knight/Guardian</th></tr></thead><tbody><tr><td style="text-align:left">2023-06-18</td><td style="text-align:center"><a href="https://leetcode.cn/contest/weekly-contest-350/">weekly-350</a></td><td style="text-align:center"><code>1578/+49</code></td><td style="text-align:center">967 / 3580</td><td style="text-align:center">前27.01%</td><td style="text-align:center"><code>7/18</code></td><td style="text-align:center"><code>1883/2259</code></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">分数</th><th style="text-align:center">难度<code>7007</code></th><th style="text-align:left">题号</th><th style="text-align:center">AC time</th><th style="text-align:center">思路</th><th style="text-align:center">备  注</th></tr></thead><tbody><tr><td style="text-align:left">3</td><td style="text-align:center">1262</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2739.html">2739. 总行驶距离</a></td><td style="text-align:center">0:05:59</td><td style="text-align:center">暴力</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">4</td><td style="text-align:center">1301</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2740.html">2740. 找出分区值</a></td><td style="text-align:center">0:09:12</td><td style="text-align:center">排序</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">4</td><td style="text-align:center">2020</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2741.html">2741. 特别的排列</a></td><td style="text-align:center"></td><td style="text-align:center">dfs+状态压缩</td><td style="text-align:center">dfs+visit数组超时</td></tr><tr><td style="text-align:left">6</td><td style="text-align:center">2424</td><td style="text-align:left"><a href="https://michealxie94.github.io/post/LC2742.html">2742. 给墙壁刷油漆</a></td><td style="text-align:center"></td><td style="text-align:center"><code>没解决</code></td><td style="text-align:center"></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> LeetCode周赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Butterfly搭建过程和解决方案</title>
      <link href="/post/e5341844.html"/>
      <url>/post/e5341844.html</url>
      
        <content type="html"><![CDATA[<p><code></code></p><h2 id="hexo初次搭建-2023-06-27"><a href="#hexo初次搭建-2023-06-27" class="headerlink" title="hexo初次搭建 (2023.06.27)"></a>hexo初次搭建 (2023.06.27)</h2><p>难度：<code>easy</code><br><a href="https://maets-906.github.io/2023/04/11/%E5%9F%BA%E4%BA%8EHexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">基于Hexo+Github搭建个人博客</a><br><a href="https://www.bilibili.com/video/BV1NY4y1C7Ng/">【2022最新版】保姆级Hexo+github搭建个人博客并绑定自己的域名</a></p><h2 id="添加访客地图-2023-07-05"><a href="#添加访客地图-2023-07-05" class="headerlink" title="添加访客地图 (2023.07.05)"></a>添加访客地图 (2023.07.05)</h2><p>难度：<code>easy</code><br><a href="https://blog.csdn.net/cungudafa/article/details/105925710">hexo(butterfly)加入clustrmaps访问者地图</a></p><h2 id="添加twikoo评论系统-2023-07-03"><a href="#添加twikoo评论系统-2023-07-03" class="headerlink" title="添加twikoo评论系统 (2023.07.03)"></a>添加<code>twikoo</code>评论系统 (2023.07.03)</h2><p>难度：<code>hard</code><br><a href="https://fe32.top/articles/hexo1611/">基于 Hexo 键入评论功能 - Twikoo Vercel 部署教程</a><br><code>bug:Vercel</code>部署结束，只显示登录密码，没有注册密码界面</p><p>难度：<code>medium</code><br><a href="https://ganzhe2028.github.io/posts/20419#">使用 zeabur 部署 twikoo</a><br><code>bug：</code>同样出现没有注册密码界面，原因：配置<code>zeabur domain</code>后需要<code>redeploy</code></p><h2 id="添加twikoo评论系统邮件推送-2023-07-04"><a href="#添加twikoo评论系统邮件推送-2023-07-04" class="headerlink" title="添加twikoo评论系统邮件推送 (2023.07.04)"></a>添加<code>twikoo</code>评论系统邮件推送 (2023.07.04)</h2><p>难度：<code>easy</code><br><a href="https://blog.csdn.net/weixin_58068682/article/details/122770936#">部署Twikoo评论系统及其邮件推送(Vercel)</a></p><h2 id="github个人网站加速-2023-07-04"><a href="#github个人网站加速-2023-07-04" class="headerlink" title="github个人网站加速 (2023.07.04)"></a><code>github</code>个人网站加速 (2023.07.04)</h2><p>难度：<code>easy</code><br>将个人网站添加到<code>zeabur</code>中，同2<br><a href="https://ganzhe2028.github.io/posts/20419#">使用 zeabur 部署 twikoo</a></p><h2 id="添加twikoo评论系统表情包-2023-07-04-尚未解决"><a href="#添加twikoo评论系统表情包-2023-07-04-尚未解决" class="headerlink" title="添加twikoo评论系统表情包 (2023.07.04 尚未解决)"></a>添加<code>twikoo</code>评论系统表情包 (2023.07.04 尚未解决)</h2><p>难度：<br><a href="https://github.com/2X-ercha/Twikoo-Magic">Twikoo-Magic</a><br><a href="https://dalinziaixiaozhouzhou.gitee.io/posts/255e503ca">Twikoo表情包修改</a><br><code>bug：</code>不知如何上传表情包<code>json</code>到服务器，上传到<code>github</code>目前不能配置好</p><h2 id="添加social图标-2023-07-05"><a href="#添加social图标-2023-07-05" class="headerlink" title="添加social图标 (2023.07.05)"></a>添加<code>social</code>图标 (2023.07.05)</h2><p>难度：<code>easy</code><br><a href="https://fontawesome.com/search">fontawesome</a><br>搜索图标，可以修改样式和颜色</p><h2 id="添加天气插件-2023-06-29"><a href="#添加天气插件-2023-06-29" class="headerlink" title="添加天气插件 (2023.06.29)"></a>添加天气插件 (2023.06.29)</h2><p>难度：<code>easy</code><br><a href="https://han1eng.github.io/2023/03/02/widget-weather/">Hexo 添加天气插件</a></p><h2 id="添加搜索功能-2023-06-28-尚未解决"><a href="#添加搜索功能-2023-06-28-尚未解决" class="headerlink" title="添加搜索功能 (2023.06.28 尚未解决)"></a>添加搜索功能 (2023.06.28 尚未解决)</h2><p>难度：<code>medium</code><br><a href="https://fe32.top/articles/hexo1607/">基于 Hexo 键入搜索功能</a><br><code>Local search</code>    全文搜索   (目前采用)<br><code>Algolia</code>         标题搜索   (可实现，并未采用)<br><code>Algoliasearch</code>   全文搜索   (遇到问题，尚未解决)</p><h2 id="添加表格-2023-07-05"><a href="#添加表格-2023-07-05" class="headerlink" title="添加表格 (2023.07.05)"></a>添加表格 (2023.07.05)</h2><p>难度：<code>easy</code><br><a href="https://blog.csdn.net/qq_34745941/article/details/111499783">Markdown 单元格合并详解（rowspan、colspan）</a></p><p><table border="1">    <tr>        <th align="center">标题 1</th>   <!-- 左对齐 -->        <th align="center">标题 2</th> <!-- 居中对齐（默认）-->        <th align="center">标题 3</th>  <!-- 右对齐-->    </tr>    <tr>        <td rowspan="2">col 11</td>        <td>col 12</td>        <td>col 13</td>    </tr>    <tr>        <td>col 22</td>        <td>col 23</td>    </tr></table><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span>   <span class="comment">&lt;!-- 左对齐 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="comment">&lt;!-- 居中对齐（默认）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题 3<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  <span class="comment">&lt;!-- 右对齐--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>col 11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>col 12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>col 13<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>col 22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>col 23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="官方教程-2023-07-05"><a href="#官方教程-2023-07-05" class="headerlink" title="官方教程 (2023.07.05)"></a>官方教程 (2023.07.05)</h2><p><a href="https://markdown.com.cn/">Markdown</a><br><a href="https://twikoo.js.org/">twikoo</a></p><h2 id="报错spwan-failed-2023-07-05"><a href="#报错spwan-failed-2023-07-05" class="headerlink" title="报错spwan failed (2023.07.05)"></a>报错spwan failed (2023.07.05)</h2><p>难度：<code>easy</code><br><a href="https://www.cnblogs.com/cairbin/p/14957855.html">解决hexo报错spwan failed</a></p><h2 id="添加文章置顶功能-2023-07-06"><a href="#添加文章置顶功能-2023-07-06" class="headerlink" title="添加文章置顶功能 (2023.07.06)"></a>添加文章置顶功能 (2023.07.06)</h2><p>难度：<code>easy</code><br><a href="https://blog.csdn.net/weixin_43372529/article/details/114176470">hexo博客主题 Butterfly优化之文章置顶</a></p><h2 id="markdown数学公式-2023-07-06"><a href="#markdown数学公式-2023-07-06" class="headerlink" title="markdown数学公式  (2023.07.06)"></a><code>markdown</code>数学公式  (2023.07.06)</h2><p>难度：<code>easy</code><br><a href="https://blog.csdn.net/Darlingqiang/article/details/119620489">Markdown数学符号&amp;公式（史上最全公式表）</a></p><h2 id="博客文章总结TianliGPT-2023-07-12收费没搞"><a href="#博客文章总结TianliGPT-2023-07-12收费没搞" class="headerlink" title="博客文章总结TianliGPT  (2023.07.12收费没搞)"></a>博客文章总结<code>TianliGPT</code>  (2023.07.12收费没搞)</h2><p>难度：<code>easy</code><br><a href="https://github.com/zhheo/Post-Abstract-AI">TianliGPT</a><br><a href="https://flowus.cn/zhheo/share/927667b2-ba27-42b1-98f2-8fb184720ed2">hexo-theme-butterfly配置方法</a><br><a href="https://afdian.net/item/f18c2e08db4411eda2f25254001e7c00">购买链接</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC2601. 质数减法运算</title>
      <link href="/post/LC2601.html"/>
      <url>/post/LC2601.html</url>
      
        <content type="html"><![CDATA[<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> ，数组长度为 <code>n</code> 。</p><p>你可以执行无限次下述运算：</p><ul>    <li>选择一个之前未选过的下标 <code>i</code> ，并选择一个 <strong>严格小于</strong> <code>nums[i]</code> 的质数 <code>p</code> ，从 <code>nums[i]</code> 中减去 <code>p</code> 。</li></ul><p>如果你能通过上述运算使得 <code>nums</code> 成为严格递增数组，则返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><strong>严格递增数组</strong> 中的每个元素都严格大于其前面的元素。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>nums = [4,9,6,10]<strong>输出：</strong>true<strong>解释：</strong>在第一次运算中：选择 i = 0 和 p = 3 ，然后从 nums[0] 减去 3 ，nums 变为 [1,9,6,10] 。在第二次运算中：选择 i = 1 和 p = 7 ，然后从 nums[1] 减去 7 ，nums 变为 [1,2,6,10] 。第二次运算后，nums 按严格递增顺序排序，因此答案为 true 。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>nums = [6,8,11,12]<strong>输出：</strong>true<strong>解释：</strong>nums 从一开始就按严格递增顺序排序，因此不需要执行任何运算。</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>nums = [5,8,3]<strong>输出：</strong>false<strong>解释：</strong>可以证明，执行运算无法使 nums 按严格递增顺序排序，因此答案是 false 。</pre><p>&nbsp;</p><p><strong>提示：</strong></p><p><ul>    <li><code>1 &lt;= nums.length &lt;= 1000</code></li>    <li><code>1 &lt;= nums[i] &lt;= 1000</code></li>    <li><code>nums.length == n</code></li></ul></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>逆向思考，从后往前找，记录<code>last</code><br>如果当前<code>x &lt; last</code>,则<code>continue</code><br>如果当前<code>x &gt;= last</code>,则<code>x - p &lt; last</code> (<code>x-p</code>要足够的大，则<code>p</code>需要足够的小),等价于<code> p &gt; x - last</code>,<code>p</code>是比<code>x-last</code>大的最小质数<br>WA注意：需要额外增加一个质数，可以把<code>N</code>设置大一些。<br>如果 <code>last &lt;= 0</code>,说明当前的<code>p</code>并没有严格小于<code>x</code>，返回<code>False</code><br>例如<code>[5,3,8]</code><br><code>last = inf,x = 3,3 &lt; inf,last = 3</code><br><code>last = 3,  x = 8,8 &gt; 3,  last = 8 - 7 = 1</code><br><code>last = 1,  x = 5,5 &gt; 1,  last = 5 - 5 = 0</code>(没有严格递增)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预处理</span></span><br><span class="line">MX = <span class="number">10</span> ** <span class="number">4</span> + <span class="number">1</span></span><br><span class="line">primes = [<span class="number">0</span>]</span><br><span class="line">is_prime = [<span class="literal">True</span>] * MX</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, MX):</span><br><span class="line">    <span class="keyword">if</span> is_prime[i]:</span><br><span class="line">        primes.append(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i * i, MX, i):</span><br><span class="line">            is_prime[j] = <span class="literal">False</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment"># 正向思考</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">primeSubOperation_1</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        pre = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> x &lt;= pre:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            idx = bisect.bisect_left(primes,x - pre)-<span class="number">1</span></span><br><span class="line">            pre = x - primes[idx]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 逆向思考</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">primeSubOperation</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        last = inf</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            x = nums[i]</span><br><span class="line">            <span class="keyword">if</span> x &lt; last:</span><br><span class="line">                last = x</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                idx = bisect.bisect_left(primes,x - last + <span class="number">10e-9</span>)</span><br><span class="line">                last = x - primes[idx]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> last &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure></p><h2 id="灵神代码"><a href="#灵神代码" class="headerlink" title="灵神代码"></a><a href="https://leetcode.cn/problems/prime-subtraction-operation/solution/jian-ji-xie-fa-shai-zhi-shu-er-fen-cha-z-wj7i/">灵神代码</a></h2><p>设<code>pre</code>是上一个减完后的数字，<code>x=nums[i]</code> 为当前数字。<br>设<code>p</code>是满足<code>x−p&gt;pre</code> 的最大质数，换言之<code>p </code>是小于<code>x−pre </code>的最大质数，这可以预处理质数列表后，用二分查找得到。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MX = <span class="number">1000</span></span><br><span class="line">P = [<span class="number">0</span>]  <span class="comment"># 哨兵，避免二分越界</span></span><br><span class="line">is_prime = [<span class="literal">True</span>] * MX</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, MX):</span><br><span class="line">    <span class="keyword">if</span> is_prime[i]:</span><br><span class="line">        P.append(i)  <span class="comment"># 预处理质数列表</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i * i, MX, i):</span><br><span class="line">            is_prime[j] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">primeSubOperation</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        pre = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> x &lt;= pre: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            pre = x - P[bisect_left(P, x - pre) - <span class="number">1</span>]  <span class="comment"># 减去 &lt; x-pre 的最大质数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="5.943ex" height="2.034ex" role="img" focusable="false" viewbox="0 -694 2627 899" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-4-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/><path id="MJX-4-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/><path id="MJX-4-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/><path id="MJX-4-TEX-I-1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-4-TEX-I-1D45B"/></g><g data-mml-node="mi" transform="translate(600,0)"><use data-c="1D459" xlink:href="#MJX-4-TEX-I-1D459"/></g><g data-mml-node="mi" transform="translate(898,0)"><use data-c="1D45C" xlink:href="#MJX-4-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(1383,0)"><use data-c="1D454" xlink:href="#MJX-4-TEX-I-1D454"/></g><g data-mml-node="mi" transform="translate(1860,0)"><use data-c="1D448" xlink:href="#MJX-4-TEX-I-1D448"/></g></g></g></g></svg></mjx-container>)，其中 <code>n</code> 为 <code>nums</code> 的长度，<code>U</code> 为 <code>1000</code> 以内的质数个数。<br>空间复杂度：O(1)</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode-medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> LC周赛Q2 </tag>
            
            <tag> LeetCode1700 </tag>
            
            <tag> 质数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC2679. 矩阵中的和</title>
      <link href="/post/LC2679.html"/>
      <url>/post/LC2679.html</url>
      
        <content type="html"><![CDATA[<p>给你一个下标从 <strong>0</strong>&nbsp;开始的二维整数数组&nbsp;<code>nums</code>&nbsp;。一开始你的分数为&nbsp;<code>0</code>&nbsp;。你需要执行以下操作直到矩阵变为空：</p><ol>    <li>矩阵中每一行选取最大的一个数，并删除它。如果一行中有多个最大的数，选择任意一个并删除。</li>    <li>在步骤 1 删除的所有数字中找到最大的一个数字，将它添加到你的 <strong>分数</strong>&nbsp;中。</li></ol><p>请你返回最后的 <strong>分数</strong>&nbsp;。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><b>输入：</b>nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]<b>输出：</b>15<b>解释：</b>第一步操作中，我们删除 7 ，6 ，6 和 3 ，将分数增加 7 。下一步操作中，删除 2 ，4 ，5 和 2 ，将分数增加 5 。最后删除 1 ，2 ，3 和 1 ，将分数增加 3 。所以总得分为 7 + 5 + 3 = 15 。</pre><p><strong>示例 2：</strong></p><pre><b>输入：</b>nums = [[1]]<b>输出：</b>1<b>解释：</b>我们删除 1 并将分数增加 1 ，所以返回 1 。</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= nums.length &lt;= 300</code></li>    <li><code>1 &lt;= nums[i].length &lt;= 500</code></li>    <li><code>0 &lt;= nums[i][j] &lt;= 10<sup>3</sup></code></li></ul><p>复杂度 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="6.553ex" height="2.351ex" role="img" focusable="false" viewbox="0 -833.9 2896.6 1038.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-5-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path id="MJX-5-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/><path id="MJX-5-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/><path id="MJX-5-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-5-TEX-I-1D45B"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"/></g></g><g data-mml-node="mi" transform="translate(1036.6,0)"><use data-c="1D459" xlink:href="#MJX-5-TEX-I-1D459"/></g><g data-mml-node="mi" transform="translate(1334.6,0)"><use data-c="1D45C" xlink:href="#MJX-5-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(1819.6,0)"><use data-c="1D454" xlink:href="#MJX-5-TEX-I-1D454"/></g><g data-mml-node="mi" transform="translate(2296.6,0)"><use data-c="1D45B" xlink:href="#MJX-5-TEX-I-1D45B"/></g></g></g></g></svg></mjx-container>)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment">#复杂度O(n^2logn)</span></span><br><span class="line">    <span class="comment">#用堆的话复杂度一样</span></span><br><span class="line">    <span class="comment">#主要考察矩阵的转置</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">matrixSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> nums:</span><br><span class="line">            tmp = <span class="built_in">sorted</span>(item)</span><br><span class="line">            ans.append(tmp)</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">zip</span>(*ans):</span><br><span class="line">            cnt+=<span class="built_in">max</span>(item)</span><br><span class="line">        <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode-medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> LC周赛Q2 </tag>
            
            <tag> LeetCode1300 </tag>
            
            <tag> 矩阵转置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC2600.K 件物品的最大和</title>
      <link href="/post/LC2600.html"/>
      <url>/post/LC2600.html</url>
      
        <content type="html"><![CDATA[<hr><p>袋子中装有一些物品，每个物品上都标记着数字 <code>1</code> 、<code>0</code> 或 <code>-1</code> 。</p><p>给你四个非负整数 <code>numOnes</code> 、<code>numZeros</code> 、<code>numNegOnes</code> 和 <code>k</code> 。</p><p>袋子最初包含：</p><ul>    <li><code>numOnes</code> 件标记为 <code>1</code> 的物品。</li>    <li><code>numZeroes</code> 件标记为 <code>0</code> 的物品。</li>    <li><code>numNegOnes</code> 件标记为 <code>-1</code> 的物品。</li></ul><p>现计划从这些物品中恰好选出 <code>k</code> 件物品。返回所有可行方案中，物品上所标记数字之和的最大值。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2<strong>输出：</strong>2<strong>解释：</strong>袋子中的物品分别标记为 {1, 1, 1, 0, 0} 。取 2 件标记为 1 的物品，得到的数字之和为 2 。可以证明 2 是所有可行方案中的最大值。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4<strong>输出：</strong>3<strong>解释：</strong>袋子中的物品分别标记为 {1, 1, 1, 0, 0} 。取 3 件标记为 1 的物品，1 件标记为 0 的物品，得到的数字之和为 3 。可以证明 3 是所有可行方案中的最大值。</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>0 &lt;= numOnes, numZeros, numNegOnes &lt;= 50</code></li>    <li><code>0 &lt;= k &lt;= numOnes + numZeros + numNegOnes</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kItemsWithMaximumSum</span>(<span class="params">self, numOnes: <span class="built_in">int</span>, numZeros: <span class="built_in">int</span>, numNegOnes: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> k &lt;= numOnes + numZeros:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(k,numOnes)</span><br><span class="line">        <span class="keyword">return</span> numOnes - (k - numOnes - numZeros)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> LC周赛Q1 </tag>
            
            <tag> LeetCode1400 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC2761.和等于目标值的质数对</title>
      <link href="/post/LC2761.html"/>
      <url>/post/LC2761.html</url>
      
        <content type="html"><![CDATA[<p>给你一个整数 <code>n</code> 。如果两个整数 <code>x</code> 和 <code>y</code> 满足下述条件，则认为二者形成一个质数对：</p><ul>    <li><code>1 &lt;= x &lt;= y &lt;= n</code></li>    <li><code>x + y == n</code></li>    <li><code>x</code> 和 <code>y</code> 都是质数</li></ul><p>请你以二维有序列表的形式返回符合题目要求的所有 <code>[x<sub>i</sub>, y<sub>i</sub>]</code> ，列表需要按 <code>x<sub>i</sub></code> 的 <strong>非递减顺序</strong> 排序。如果不存在符合要求的质数对，则返回一个空数组。</p><p><strong>注意：</strong>质数是大于 <code>1</code> 的自然数，并且只有两个因子，即它本身和 <code>1</code> 。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>n = 10<strong>输出：</strong>[[3,7],[5,5]]<strong>解释：</strong>在这个例子中，存在满足条件的两个质数对。 这两个质数对分别是 [3,7] 和 [5,5]，按照题面描述中的方式排序后返回。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>n = 2<strong>输出：</strong>[]<strong>解释：</strong>可以证明不存在和为 2 的质数对，所以返回一个空数组。 </pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= n &lt;= 10<sup>6</sup></code></li></ul><p>WA的原因：需要在类外进行数据的预处理</p><h2 id="比赛ac代码"><a href="#比赛ac代码" class="headerlink" title="比赛ac代码"></a>比赛ac代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findPrimePairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">2</span>) <span class="keyword">or</span> (x == <span class="number">3</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">6</span> != <span class="number">1</span>) <span class="keyword">and</span> (x % <span class="number">6</span> != <span class="number">5</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="built_in">int</span>(x ** <span class="number">0.5</span>) + <span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">or</span> (x % (i + <span class="number">2</span>) == <span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># n = 3</span></span><br><span class="line">        <span class="comment"># se = set([i for i in range(2,n) if f(i)])</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">            r = n - l</span><br><span class="line">            <span class="keyword">if</span> l == <span class="number">2</span> <span class="keyword">or</span> ( l%<span class="number">2</span>==<span class="number">1</span> <span class="keyword">and</span> r%<span class="number">2</span>==<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> l &lt;= r  <span class="keyword">and</span> f(l) <span class="keyword">and</span> f(r):</span><br><span class="line">                    ans.append([l,r])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="灵神代码"><a href="#灵神代码" class="headerlink" title="灵神代码"></a><a href="https://leetcode.cn/problems/prime-pairs-with-target-sum/solution/yu-chu-li-zhi-shu-mei-ju-by-endlesscheng-cq9b/">灵神代码</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预处理</span></span><br><span class="line">MX = <span class="number">10</span> ** <span class="number">6</span> + <span class="number">1</span></span><br><span class="line">primes = []</span><br><span class="line">is_prime = [<span class="literal">True</span>] * MX</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, MX):</span><br><span class="line">    <span class="keyword">if</span> is_prime[i]:</span><br><span class="line">        primes.append(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i * i, MX, i):</span><br><span class="line">            is_prime[j] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findPrimePairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> [[<span class="number">2</span>, n - <span class="number">2</span>]] <span class="keyword">if</span> n &gt; <span class="number">4</span> <span class="keyword">and</span> is_prime[n - <span class="number">2</span>] <span class="keyword">else</span> []</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> primes:</span><br><span class="line">            y = n - x</span><br><span class="line">            <span class="keyword">if</span> y &lt; x:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> is_prime[y]:</span><br><span class="line">                ans.append([x, y])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LC周赛Q2 </tag>
            
            <tag> 质数 </tag>
            
            <tag> 埃氏筛 </tag>
            
            <tag> 线性筛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC2762.不间断子数组</title>
      <link href="/post/LC2762.html"/>
      <url>/post/LC2762.html</url>
      
        <content type="html"><![CDATA[<p>给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;。<code>nums</code>&nbsp;的一个子数组如果满足以下条件，那么它是 <strong>不间断</strong> 的：</p><ul>    <li><code>i</code>，<code>i + 1</code>&nbsp;，...，<code>j</code><sub> </sub>&nbsp;表示子数组中的下标。对于所有满足&nbsp;<code>i &lt;= i<sub>1</sub>, i<sub>2</sub> &lt;= j</code>&nbsp;的下标对，都有 <code>0 &lt;= |nums[i<sub>1</sub>] - nums[i<sub>2</sub>]| &lt;= 2</code>&nbsp;。</li></ul><p>请你返回 <strong>不间断</strong> 子数组的总数目。</p><p>子数组是一个数组中一段连续 <strong>非空</strong>&nbsp;的元素序列。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><b>输入：</b>nums = [5,4,2,4]<strong>输出：</strong>8<b>解释：</b>大小为 1 的不间断子数组：[5], [4], [2], [4] 。大小为 2 的不间断子数组：[5,4], [4,2], [2,4] 。大小为 3 的不间断子数组：[4,2,4] 。没有大小为 4 的不间断子数组。不间断子数组的总数目为 4 + 3 + 1 = 8 。除了这些以外，没有别的不间断子数组。</pre><p><strong>示例 2：</strong></p><pre><b>输入：</b>nums = [1,2,3]<b>输出：</b>6<b>解释：</b>大小为 1 的不间断子数组：[1], [2], [3] 。大小为 2 的不间断子数组：[1,2], [2,3] 。大小为 3 的不间断子数组：[1,2,3] 。不间断子数组的总数目为 3 + 2 + 1 = 6 。</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>    <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li></ul><p>比赛没有ac</p><h2 id="灵神代码"><a href="#灵神代码" class="headerlink" title="灵神代码"></a><a href="https://leetcode.cn/problems/continuous-subarrays/solution/shuang-zhi-zhen-ping-heng-shu-ha-xi-biao-4frl/">灵神代码</a></h2><h3 id="思路-滑动窗口"><a href="#思路-滑动窗口" class="headerlink" title="思路 滑动窗口"></a>思路 滑动窗口</h3><p>复杂度<br>时间复杂度 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-6-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"/></g></g></g></g></svg></mjx-container>)<br>空间复杂度 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewbox="0 -666 500 666" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"/></g></g></g></g></svg></mjx-container>) </p><p>难点：维护区间的最值，容易考虑线段树、树状数组进行求解，所以放弃了<br>区间最值通过<code>hash</code>进行维护<br><code>left</code>指针固定，<code>right</code>指针往右扩展，<code>right</code>每扩展一次检查当前<code>hash</code>区间最值是否满足要求，如果不满足则<code>left++</code>，进行弹出，直到满足为止<br>注：本题差值为固定的2，如果是参数<code>k</code>，则复杂度为O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.673ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 2065.4 705" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-2-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"/></g><g data-mml-node="mo" transform="translate(822.2,0)"><use data-c="2217" xlink:href="#MJX-2-TEX-N-2217"/></g><g data-mml-node="mi" transform="translate(1544.4,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"/></g></g></g></g></svg></mjx-container>)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">continuousSubarrays</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment">#滑动窗口</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        d = Counter() <span class="comment"># hash进行维护区间最值</span></span><br><span class="line">        <span class="keyword">for</span> right,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            d[x] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">max</span>(d) - <span class="built_in">min</span>(d) &gt; <span class="number">2</span>:</span><br><span class="line">                y = nums[left]</span><br><span class="line">                d[y] -= <span class="number">1</span>     <span class="comment"># 考虑数值重复</span></span><br><span class="line">                <span class="keyword">if</span> d[y] == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">del</span> d[y]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            ans += right - left + <span class="number">1</span> <span class="comment"># 当前滑动窗口以right为结尾的子数组个数，left为最远的位置</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode-medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LC周赛Q3 </tag>
            
            <tag> 子数组 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC2763. 所有子数组中不平衡数字之和</title>
      <link href="/post/LC2763.html"/>
      <url>/post/LC2763.html</url>
      
        <content type="html"><![CDATA[<p>一个长度为 <code>n</code>&nbsp;下标从 <strong>0</strong>&nbsp;开始的整数数组 <code>arr</code>&nbsp;的 <strong>不平衡数字</strong>&nbsp;定义为，在&nbsp;<code>sarr = sorted(arr)</code>&nbsp;数组中，满足以下条件的下标数目：</p><ul>    <li><code>0 &lt;= i &lt; n - 1</code>&nbsp;，和</li>    <li><code>sarr[i+1] - sarr[i] &gt; 1</code></li></ul><p>这里，<code>sorted(arr)</code>&nbsp;表示将数组 <code>arr</code>&nbsp;排序后得到的数组。</p><p>给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;，请你返回它所有&nbsp;<strong>子数组</strong>&nbsp;的&nbsp;<strong>不平衡数字</strong>&nbsp;之和。</p><p>子数组指的是一个数组中连续一段 <strong>非空</strong>&nbsp;的元素序列。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>nums = [2,3,1,4]<b>输出：</b>3<b>解释：</b>总共有 3 个子数组有非 0 不平衡数字：- 子数组 [3, 1] ，不平衡数字为 1 。- 子数组 [3, 1, 4] ，不平衡数字为 1 。- 子数组 [1, 4] ，不平衡数字为 1 。其他所有子数组的不平衡数字都是 0 ，所以所有子数组的不平衡数字之和为 3 。</pre><p><strong>示例 2：</strong></p><pre><g>输入：nums = [1,3,3,3,5]<b>输出：</b>8<b>解释：</b>总共有 7 个子数组有非 0 不平衡数字：- 子数组 [1, 3] ，不平衡数字为 1 。- 子数组 [1, 3, 3] ，不平衡数字为 1 。- 子数组 [1, 3, 3, 3] ，不平衡数字为 1 。- 子数组 [1, 3, 3, 3, 5] ，不平衡数字为 2 。- 子数组 [3, 3, 3, 5] ，不平衡数字为 1 。- 子数组 [3, 3, 5] ，不平衡数字为 1 。- 子数组 [3, 5] ，不平衡数字为 1 。其他所有子数组的不平衡数字都是 0 ，所以所有子数组的不平衡数字之和为 8 。</g></pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= nums.length &lt;= 1000</code></li>    <li><code>1 &lt;= nums[i] &lt;= nums.length</code></li></ul><h2 id="比赛ac代码"><a href="#比赛ac代码" class="headerlink" title="比赛ac代码"></a>比赛ac代码</h2><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="6.553ex" height="2.351ex" role="img" focusable="false" viewbox="0 -833.9 2896.6 1038.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-8-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-8-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path id="MJX-8-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/><path id="MJX-8-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/><path id="MJX-8-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-8-TEX-I-1D45B"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-8-TEX-N-32"/></g></g><g data-mml-node="mi" transform="translate(1036.6,0)"><use data-c="1D459" xlink:href="#MJX-8-TEX-I-1D459"/></g><g data-mml-node="mi" transform="translate(1334.6,0)"><use data-c="1D45C" xlink:href="#MJX-8-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(1819.6,0)"><use data-c="1D454" xlink:href="#MJX-8-TEX-I-1D454"/></g><g data-mml-node="mi" transform="translate(2296.6,0)"><use data-c="1D45B" xlink:href="#MJX-8-TEX-I-1D45B"/></g></g></g></g></svg></mjx-container>)<br>空间复杂度 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.912ex" role="img" focusable="false" viewbox="0 -833.9 1036.6 844.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-4-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-4-TEX-I-1D45B"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-4-TEX-N-32"/></g></g></g></g></g></svg></mjx-container>)<br>可以优化为 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-4-TEX-I-1D45B"/></g></g></g></g></svg></mjx-container>) </p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>数据量为<code>1000</code>，暴力O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.91ex" role="img" focusable="false" viewbox="0 -833.2 1036.6 844.2" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="33" xlink:href="#MJX-1-TEX-N-33"/></g></g></g></g></g></svg></mjx-container>)大约O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewbox="0 -864 1436.6 886" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/><path id="MJX-1-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"/><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"/></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"/></g></g></g></g></g></svg></mjx-container>)，可以考虑将第三次的循环改为<code>bisect_left</code>，降低复杂度O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="6.553ex" height="2.351ex" role="img" focusable="false" viewbox="0 -833.9 2896.6 1038.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path id="MJX-1-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/><path id="MJX-1-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/><path id="MJX-1-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"/></g></g><g data-mml-node="mi" transform="translate(1036.6,0)"><use data-c="1D459" xlink:href="#MJX-1-TEX-I-1D459"/></g><g data-mml-node="mi" transform="translate(1334.6,0)"><use data-c="1D45C" xlink:href="#MJX-1-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(1819.6,0)"><use data-c="1D454" xlink:href="#MJX-1-TEX-I-1D454"/></g><g data-mml-node="mi" transform="translate(2296.6,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"/></g></g></g></g></svg></mjx-container>)<br>维护递增区间<code>[L,R]</code>，该区间不平衡数字之和为<code>cnt</code>，则<code>[L,R+1]</code>区间需要判断<code>nums[R+1]</code>在递增数组的位置，<br><code>idx = bisect.bisect_left(last,nums[R+1])</code><br>1、如果小于递增区间最小值且差值大于1，则<code>cnt+=1</code><br>2、如果大于递增区间最大值且差值大于1，则<code>cnt+=1</code><br>3、如果在区间内，则判断<code>nums[R+1]</code>和<code>last[idx-1]</code>和<code>last[idx+1]</code>差值大小<br><code>cnt += ((nums[R+1] - last[idx-1]) &gt; 1) + ((last[idx+1] - nums[R+1]) &gt; 1) - ((last[idx+1] - last[idx-1]) &gt; 1)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumImbalanceNumbers</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        dp = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            last = []</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(l+<span class="number">1</span>,n):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> last:</span><br><span class="line">                    last = [<span class="built_in">min</span>(nums[l],nums[r]),<span class="built_in">max</span>(nums[l],nums[r])]</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">abs</span>(last[<span class="number">1</span>]-last[<span class="number">0</span>]) &gt; <span class="number">1</span>:</span><br><span class="line">                        dp[l][r]+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    idx = bisect_left(last,nums[r])</span><br><span class="line">                    dp[l][r] = dp[l][r-<span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">if</span> last[<span class="number">0</span>] - nums[r] &gt; <span class="number">1</span>:</span><br><span class="line">                            dp[l][r] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> idx == <span class="built_in">len</span>(last):</span><br><span class="line">                        <span class="keyword">if</span> nums[r] - last[-<span class="number">1</span>] &gt; <span class="number">1</span>:</span><br><span class="line">                            dp[l][r] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> nums[r] - last[idx-<span class="number">1</span>] &gt; <span class="number">1</span>:</span><br><span class="line">                            dp[l][r] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> last[idx] - nums[r] &gt; <span class="number">1</span>:</span><br><span class="line">                            dp[l][r] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> last[idx] - last[idx-<span class="number">1</span>] &gt; <span class="number">1</span>:</span><br><span class="line">                            dp[l][r] -= <span class="number">1</span></span><br><span class="line">                    last.insert(idx,nums[r])</span><br><span class="line">        <span class="built_in">print</span>(dp)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">sum</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> dp)</span><br></pre></td></tr></table></figure></p><h2 id="灵神代码"><a href="#灵神代码" class="headerlink" title="灵神代码"></a><a href="https://leetcode.cn/problems/sum-of-imbalance-numbers-of-all-subarrays/solution/bao-li-mei-ju-pythonjavacgo-by-endlessch-2r7p/">灵神代码</a></h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>复杂度<br>时间复杂度 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.912ex" role="img" focusable="false" viewbox="0 -833.9 1036.6 844.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"/></g></g></g></g></g></svg></mjx-container>)<br>空间复杂度 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"/></g></g></g></g></svg></mjx-container>)<br>将递增数组通过<code>hash</code>进行表示，对于<code>y = nums[r]</code>，考虑<code>vis[y-1],vis[y],vis[y+1]</code>是否出现过<code>vis</code>数组中<br>1、如果<code>vis[y]</code>访问过，则不影响冲突数量，<code>cnt = cnt</code><br>1、如果<code>vis[y-1]</code>访问过，<code>cnt = 1 - vis[y-1]</code> # 默认<code>vis[y]</code>没访问过+1<br>2、如果<code>vis[y+1]</code>访问过，<code>cnt = 1 - vis[y+1]</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumImbalanceNumbers</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> l,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            vis = [<span class="literal">False</span>]*(n+<span class="number">2</span>)</span><br><span class="line">            vis[x] = <span class="literal">True</span></span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(l+<span class="number">1</span>,n):</span><br><span class="line">                y = nums[r]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> vis[y]:</span><br><span class="line">                    cnt += <span class="number">1</span> - vis[y-<span class="number">1</span>] - vis[y+<span class="number">1</span>]</span><br><span class="line">                    vis[y] = <span class="literal">True</span></span><br><span class="line">                ans+=cnt</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>重复对<code>vis</code>数组进行赋值，可以进行优化<code>vis</code>数组，<code>vis</code>数组记录区间开始的<code>left</code>下标<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumImbalanceNumbers</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        vis = [n]*(n+<span class="number">2</span>)  <span class="comment"># 初始赋值需要进行修改</span></span><br><span class="line">        <span class="keyword">for</span> l,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            vis[x] = l   <span class="comment"># 此处记录left下标</span></span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(l+<span class="number">1</span>,n):</span><br><span class="line">                y = nums[r]</span><br><span class="line">                <span class="keyword">if</span> vis[y]!=l: <span class="comment"># 以left开始当前y值并未访问过</span></span><br><span class="line">                    cnt += <span class="number">1</span> - (vis[y-<span class="number">1</span>] == l) - (vis[y+<span class="number">1</span>]==l)</span><br><span class="line">                    vis[y] = l <span class="comment"># 更新y值以left开始访问过</span></span><br><span class="line">                ans+=cnt</span><br></pre></td></tr></table></figure></p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>复杂度<br>时间复杂度 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"/></g></g></g></g></svg></mjx-container>)<br>空间复杂度 O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"/></g></g></g></g></svg></mjx-container>)<br>待定</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode-hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 子数组 </tag>
            
            <tag> 滑动窗口 </tag>
            
            <tag> 二维dp </tag>
            
            <tag> LC周赛Q4 </tag>
            
            <tag> 贡献法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch垃圾回收-torch_gc函数</title>
      <link href="/post/bd8452a8.html"/>
      <url>/post/bd8452a8.html</url>
      
        <content type="html"><![CDATA[<p>torch_gc()是PyTorch库中的一个函数，用于手动触发垃圾回收（Garbage Collection）。垃圾回收是一种自动内存管理机制，用于释放不再使用的内存空间，以提高内存利用率。<br>在PyTorch中，垃圾回收主要用于释放不再需要的张量（Tensors）和计算图（Computation Graph）的内存。通常情况下，PyTorch会自动进行垃圾回收，但在某些情况下，手动触发垃圾回收可以更及时地释放内存，从而避免内存占用过高的问题。<br>torch_gc()函数的调用会立即触发垃圾回收，释放不再需要的内存。但需要注意的是，频繁地手动触发垃圾回收可能会导致性能下降，因为垃圾回收本身也需要一定的计算资源。因此，一般情况下，建议使用默认的自动垃圾回收机制。只有在确实需要释放大量内存的情况下，才考虑手动触发垃圾回收。</p>]]></content>
      
      
      <categories>
          
          <category> troch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> troch </tag>
            
            <tag> 垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云搭建langchain-ChatGLM知识库问答-环境搭建</title>
      <link href="/post/nlp001.html"/>
      <url>/post/nlp001.html</url>
      
        <content type="html"><![CDATA[<p>本文转载于：<a href="https://developer.aliyun.com/article/1228342">AIGC：在云上从0开始搭建langchain-ChatGLM，构建私域知识问答机器人DEMO</a><br>根据实践过程进行部分修改</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AIGC短板：知识茧房（缺少行业领域的私域数据，专有问题解答效果差；数据时效性缺陷，对实时要求高的问题效果差）。<br>解法之一：私域数据Embedding +向量数据库（语义检索—-向量相似度匹配）。将问题向量化，结合私域知识库中匹配到的“精确”内容，生成高质量prompt，再结合LLM的既有知识，以及概括、推理、扩展等能力，大大提升回答的准确性。这也是langchain-ChatGLM的基本原理：<br><img src="/post/nlp001/1.png" class title="img"><br>本文介绍了在阿里云上从0开始搭建langchain-ChatGLM，构建私域知识问答机器人DEMO。可用于日常学习和研究，减少环境搭建时踩坑。</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>以在CentOS  7.9 64位 64位系统搭建LLM环境，安装<a href="https://github.com/imClumsyPanda/langchain-ChatGLM?spm=a2c6h.12873639.article-detail.3.57f0fd88XubRds">《langchain-ChatGLM》</a>为例：<br>注：Centos的安装和Ubuntu有区别，不是apt而是yum</p><h3 id="1、-创建GPU实例（显存8GB以上，磁盘至少50G）"><a href="#1、-创建GPU实例（显存8GB以上，磁盘至少50G）" class="headerlink" title="1、 创建GPU实例（显存8GB以上，磁盘至少50G）"></a>1、 创建GPU实例（显存8GB以上，磁盘至少50G）</h3><p>本文选择了带V100 GPU的 ecs.gn6e-c12g1.3xlarge实例，在实例创建时选择安装cuda 11.4。设置用户名及登录密码。<br>注：chatglm-6b 20G+，text2vec-large-chinese 2G+ 系统盘40G</p><h3 id="2、-设置安全组配置"><a href="#2、-设置安全组配置" class="headerlink" title="2、 设置安全组配置"></a>2、 设置安全组配置</h3><p>配置出方向端口22，并在源IP中加入本机IP。<br>注：可以不加本机IP，设置安全组出口即可，python webui.py会生成公网ip地址</p><h3 id="3、-ssh到云ECS"><a href="#3、-ssh到云ECS" class="headerlink" title="3、 ssh到云ECS"></a>3、 ssh到云ECS</h3><p>如果是root登录，系统会提示正在安装CUDA，待安装完毕，查看GPU详情（若命令无法正常运行，则说明CUDA没安装好）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><br>注：nvidia-smi中间没有空格<br>本文采用SecureCRT 8.3连接ECS，由于动态申请GPU资源，公网ip一直变动，需要重新绑定<br>新机器需要开启ssh服务(默认开启状态2023.06.30测)，参考于<a href="https://blog.csdn.net/qq_41906031/article/details/107158874">使用SecureCRT远程连接阿里服务器</a><br>A、以Ubuntu为例，Ubuntu开启ssh服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.安装ssh-server</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line">ps -e | grep ssh检测shh是否启动</span><br><span class="line"><span class="comment">#2.启动ssh服务</span></span><br><span class="line">sudo /etc/init.d/ssh restart 启动ssh服务</span><br><span class="line">service ssh status查看ssh服务状态</span><br><span class="line"><span class="comment"># service ssh start  启动ssh服务</span></span><br><span class="line"><span class="comment"># service ssh stop停止ssh服务</span></span><br></pre></td></tr></table></figure><br>B、 修改服务器内置文件<br>需要更改config文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config </span><br><span class="line">PasswordAuthentication no <span class="comment">#修改 </span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span>  <span class="comment">#修改 </span></span><br></pre></td></tr></table></figure><br>C、重启服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></p><h3 id="4、-在ECS上安装相关软件包"><a href="#4、-在ECS上安装相关软件包" class="headerlink" title="4、 在ECS上安装相关软件包"></a>4、 在ECS上安装相关软件包</h3><p>A、sudo yum-get update<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-get update</span><br></pre></td></tr></table></figure><br>B、安装gcc编译器(可选，系统中通常已有)(不需要)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install build-essential</span><br></pre></td></tr></table></figure><br>C、安装Python，以3.8为例(可选，系统中通常已有)(不需要)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install python3.8</span><br></pre></td></tr></table></figure><br>D、安装miniconda<br>（1）下载安装包：注意miniconda包需选择对应python版本的包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-py38_23.3.1-0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><br>（2）运行安装脚本，并初始化：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Miniconda3-py38_23.3.1-0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><br>（3）（可在2中完成）初始化终端 Shell，以便运conda。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/miniconda3/bin/conda init</span><br></pre></td></tr></table></figure><br>（4）初始化完成后，运行bash命令，即可进入conda环境：bash<br>（5）创建⼀个新的环境（可选）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name py38 python=3.8 -y</span><br></pre></td></tr></table></figure><br>（6）激活py38环境（可选）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate py38</span><br></pre></td></tr></table></figure></p><h3 id="5、安装git"><a href="#5、安装git" class="headerlink" title="5、安装git"></a>5、安装git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git</span><br></pre></td></tr></table></figure><h3 id="6、下载langchain-ChatGLM并安装软件依赖"><a href="#6、下载langchain-ChatGLM并安装软件依赖" class="headerlink" title="6、下载langchain-ChatGLM并安装软件依赖"></a>6、下载langchain-ChatGLM并安装软件依赖</h3><p>git clone langchain-ChatGLM<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/imClumsyPanda/langchain-ChatGLM.git</span><br><span class="line"><span class="built_in">cd</span> langchain-ChatGLM &amp;&amp; pip install -r requirements.txt</span><br><span class="line">pip install fastapi uvicorn</span><br><span class="line">conda install nltk        <span class="comment"># langchain依赖的语言工具包</span></span><br></pre></td></tr></table></figure></p><h3 id="7、模型下载"><a href="#7、模型下载" class="headerlink" title="7、模型下载"></a>7、模型下载</h3><p>将chatglm-6b模型及Embedding 模型，下载到本地（可从本地加载模型）：目前支持chatglm-6b-int4-qe、chatglm-6b-int4、chatglm-6b-int8、chatglm-6b、chatyuan、moss。本文以chatglm-6b为例。<br>注：模型需要占用数十G空间，可将ECS实例的本地盘格式化后挂载，将模型存放在本地盘上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install git-lfs <span class="comment">#安装git-lfs</span></span><br><span class="line">git-lfs <span class="built_in">clone</span> https://huggingface.co/THUDM/chatglm-6b</span><br></pre></td></tr></table></figure><br>下载 Embedding 模型<br>目前支持ernie-tiny、ernie-base、text2vec-base、text2vec，本文以text2vec为例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://huggingface.co/GanymedeNil/text2vec-large-chinese</span><br></pre></td></tr></table></figure><br>模型更新<br>可打开模型所在文件夹后拉取最新模型文件/代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git lfs pull</span><br></pre></td></tr></table></figure></p><h3 id="8、更新模型路径"><a href="#8、更新模型路径" class="headerlink" title="8、更新模型路径"></a>8、更新模型路径</h3><p>config/model_config.py中的模型路径为本地路径。<br>llm_model_dict变量中”chatglm-6b”：”pretrained_model_name”: “./chatglm-6b”<br>embedding_model_dict变量中”text2vec”：”text2vec”: “./text2vec-large-chinese”</p><h3 id="9、导入文档"><a href="#9、导入文档" class="headerlink" title="9、导入文档"></a>9、导入文档</h3><p>目前主要支持md、txt、pdf、jpg格式。</p><h3 id="10、运行CLI或web-DEMO："><a href="#10、运行CLI或web-DEMO：" class="headerlink" title="10、运行CLI或web DEMO："></a>10、运行CLI或web DEMO：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python cli_demo.py</span><br></pre></td></tr></table></figure><p>webui：如需要公网访问，还需要将webui.py中修改：share=True<br>A、安装gradio<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gradio</span><br></pre></td></tr></table></figure><br>B、在ECS实例安全组的入方向添加安全组规则，并放行8501端口（默认公网服务端口，也可以自定义）。<br>C、在ECS上运行脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python webui.py</span><br></pre></td></tr></table></figure><br>D、脚本运行成功后，会展示生成的公网链接。在本机浏览器中输入该链接，就可以使用了。<br>此外，如果不想修改安全组端口，也无需公网访问。可以把模型的本地服务端口7860直接映射到自己的本地便携上，登录使用：<br>A、本地便携机上执行如下命令，将云ECS的7860端口映射到本地（IP及用户名填实际的）：<br>ssh -L7860:localhost:7860 ecs-user@本地便携IP<br>B、在本地浏览器登录web界面：<a href="http://127.0.0.1:7860">http://127.0.0.1:7860</a><br>相同的问题，在未结合私域数据下，使用相同ChatGLM模型回答如下：从对比可以看出，无私域数据情况下的回答有明显的错误。而结合私域数据后，答案很准确。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="https://developer.aliyun.com/article/1228342">阿里云:AIGC：在云上从0开始搭建langchain-ChatGLM，构建私域知识问答机器人DEMO</a><br>2、<a href="https://www.bilibili.com/video/BV1yT41187ki">Bilibili:20元搞定，买云GPU训练一个自己的GPT</a><br>3、<a href="heywhale.com/mw/project/6436d82948f7da1fee2be59e">Model Whale:ChatGLM-6B 在 ModelWhale 平台的部署与微调教程</a><br>4、<a href="https://blog.csdn.net/qq_41906031/article/details/107158874">CSDN:使用SecureCRT远程连接阿里服务器</a><br>5、<a href="https://github.com/THUDM/ChatGLM-6B#readme">https://github.com/THUDM/ChatGLM-6B#readme</a><br>6、<a href="https://github.com/imClumsyPanda/langchain-ChatGLM">https://github.com/imClumsyPanda/langchain-ChatGLM</a><br>7、<a href="https://github.com/imClumsyPanda/langchain-ChatGLM/blob/master/docs/FAQ.md">https://github.com/imClumsyPanda/langchain-ChatGLM/blob/master/docs/FAQ.md</a></p>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chatgpt </tag>
            
            <tag> langchain </tag>
            
            <tag> Linux </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> text2vec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试math jax</title>
      <link href="/post/441c7c2.html"/>
      <url>/post/441c7c2.html</url>
      
        <content type="html"><![CDATA[<p>这是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.985ex;" xmlns="http://www.w3.org/2000/svg" width="4.653ex" height="2.942ex" role="img" focusable="false" viewbox="0 -864.9 2056.8 1300.3" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(851.6,394) scale(0.707)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"/></g><g data-mml-node="mrow" transform="translate(220,-377.4) scale(0.707)"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"/></g><g data-mml-node="mn" transform="translate(605,289) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"/></g></g><g data-mml-node="mo" transform="translate(1008.6,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"/></g><g data-mml-node="mn" transform="translate(1786.6,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"/></g></g><rect width="1816.8" height="60" x="120" y="220"/></g></g></g></svg></mjx-container>例子</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Michealxie94</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Deploy-to-remote-sites-1"><a href="#Deploy-to-remote-sites-1" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://leetcode-cn.com/graphql&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页加载排名列表</span></span><br><span class="line"><span class="meta">@lru_cache</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loadPage</span>(<span class="params">page</span>):</span><br><span class="line">    query = <span class="string">&quot;&#123;\n  localRankingV2(page:&quot;</span> + <span class="built_in">str</span>(</span><br><span class="line">        page) + <span class="string">&quot;) &#123;\nmyRank &#123;\nattendedContestCount\ncurrentRatingRanking\ndataRegion\nisDeleted\n&quot;</span> \</span><br><span class="line">                <span class="string">&quot;user &#123;\nrealName\nuserAvatar\nuserSlug\n__typename\n&#125;\n__typename\n&#125;\npage\ntotalUsers\nuserPerPage\n&quot;</span> \</span><br><span class="line">                <span class="string">&quot;rankingNodes &#123;\nattendedContestCount\ncurrentRatingRanking\ndataRegion\nisDeleted\n&quot;</span> \</span><br><span class="line">                <span class="string">&quot;user &#123;\nrealName\nuserAvatar\nuserSlug\n__typename\n&#125;\n__typename\n&#125;\n__typename\n  &#125;\n&#125;\n&quot;</span></span><br><span class="line">    retry = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> retry &lt; <span class="number">3</span>:</span><br><span class="line">        resp = requests.post(url=url, json=&#123;<span class="string">&#x27;query&#x27;</span>: query&#125;)</span><br><span class="line">        <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">            nodes = resp.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;localRankingV2&#x27;</span>][<span class="string">&#x27;rankingNodes&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> [(<span class="built_in">int</span>(nd[<span class="string">&#x27;currentRatingRanking&#x27;</span>]), nd[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;userSlug&#x27;</span>]) <span class="keyword">for</span> nd <span class="keyword">in</span> nodes]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            retry += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据用户名获取其个人主页显示的真实分数，因为四舍五入会导致一部分 1599.xxx 的用户也显示为 1600 分</span></span><br><span class="line"><span class="meta">@lru_cache</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUserRank</span>(<span class="params">uid</span>):</span><br><span class="line">    operationName = <span class="string">&quot;userContest&quot;</span></span><br><span class="line">    query = <span class="string">&quot;query userContest($userSlug: String!)&#123;\n userContestRanking(userSlug: $userSlug)&#123;&quot;</span> \</span><br><span class="line">            <span class="string">&quot;\ncurrentRatingRanking\nratingHistory\n&#125;\n&#125;\n &quot;</span></span><br><span class="line">    variables = &#123;<span class="string">&#x27;userSlug&#x27;</span>: uid&#125;</span><br><span class="line">    retry = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> retry &lt; <span class="number">3</span>:</span><br><span class="line">        resp = requests.post(url=url, json=&#123;</span><br><span class="line">            <span class="string">&#x27;operationName&#x27;</span>: operationName,</span><br><span class="line">            <span class="string">&#x27;query&#x27;</span>: query,</span><br><span class="line">            <span class="string">&#x27;variables&#x27;</span>: variables</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">            ranking = resp.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;userContestRanking&#x27;</span>]</span><br><span class="line">            score = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">if</span> ranking <span class="keyword">and</span> <span class="string">&#x27;ratingHistory&#x27;</span> <span class="keyword">in</span> ranking:</span><br><span class="line">                s = ranking[<span class="string">&#x27;ratingHistory&#x27;</span>]</span><br><span class="line">                mth = re.search(<span class="string">r&#x27;(\d+(?:\.\d+)?)(?:, null)*]$&#x27;</span>, s)</span><br><span class="line">                <span class="keyword">if</span> mth:</span><br><span class="line">                    score = mth.group(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> (ranking[<span class="string">&#x27;currentRatingRanking&#x27;</span>], <span class="built_in">float</span>(score)) <span class="keyword">if</span> score <span class="keyword">else</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            retry += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用二分的方式获取1600分以上的人数，并使用 getUserRank 方法校准</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get1600Count</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">    l, r = <span class="number">1</span>, <span class="number">3000</span></span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = (l + r + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        page = loadPage(mid)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;第 <span class="subst">&#123;mid&#125;</span> 页：&#x27;</span>, page)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> page:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        score = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> _, uid <span class="keyword">in</span> page:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> uid:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            score = getUserRank(uid)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> score <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> score &lt; <span class="number">1600</span>:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid</span><br><span class="line">    page = [uid <span class="keyword">for</span> _, uid <span class="keyword">in</span> loadPage(l) <span class="keyword">if</span> uid]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;校准中...&#x27;</span>)</span><br><span class="line">    l, r = <span class="number">0</span>, <span class="built_in">len</span>(page) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = (l + r + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        ranking, score = getUserRank(page[mid])</span><br><span class="line">        <span class="keyword">if</span> score &lt; <span class="number">1600</span>:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getUserRank(page[l])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定排名的用户, alter: 替补方向，向中间替补</span></span><br><span class="line"><span class="meta">@lru_cache</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUser</span>(<span class="params">rank, alter</span>):</span><br><span class="line">    <span class="keyword">while</span> rank:</span><br><span class="line">        <span class="keyword">if</span> rank &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;无效的排名&#x27;</span>)</span><br><span class="line">        p = (rank - <span class="number">1</span>) // <span class="number">25</span> + <span class="number">1</span></span><br><span class="line">        off = (rank - <span class="number">1</span>) % <span class="number">25</span></span><br><span class="line">        page = loadPage(p)</span><br><span class="line">        <span class="keyword">if</span> page[off][<span class="number">1</span>]:</span><br><span class="line">            ranking, score = getUserRank(page[off][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> score, page[off][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rank += alter</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;--&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">total = get1600Count()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> total:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;网络故障&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;1600 分以上共计 <span class="subst">&#123;total&#125;</span> 人&#x27;</span>)</span><br><span class="line"></span><br><span class="line">guardian = <span class="built_in">int</span>(total * <span class="number">0.05</span>)</span><br><span class="line">knight = <span class="built_in">int</span>(total * <span class="number">0.25</span>)</span><br><span class="line">g_first, g_last = getUser(<span class="number">1</span>, <span class="number">1</span>), getUser(guardian, -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Guardian(top 5%): 共 <span class="subst">&#123;guardian&#125;</span> 名，守门员 <span class="subst">&#123;g_last[<span class="number">0</span>]&#125;</span> 分（uid: <span class="subst">&#123;g_last[<span class="number">1</span>]&#125;</span>），最高 <span class="subst">&#123;g_first[<span class="number">0</span>]&#125;</span> 分（uid: <span class="subst">&#123;g_first[<span class="number">1</span>]&#125;</span>）&#x27;</span>)</span><br><span class="line">k_first, k_last = getUser(guardian + <span class="number">1</span>, <span class="number">1</span>), getUser(knight, -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Knight(top 25%): 共 <span class="subst">&#123;knight&#125;</span> 名，守门员 <span class="subst">&#123;k_last[<span class="number">0</span>]&#125;</span> 分（uid: <span class="subst">&#123;k_last[<span class="number">1</span>]&#125;</span>），最高 <span class="subst">&#123;k_first[<span class="number">0</span>]&#125;</span> 分（uid: <span class="subst">&#123;k_first[<span class="number">1</span>]&#125;</span>）&#x27;</span>)</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* Twikoo 评论样式 */.tk-input .el-textarea__inner {    min-height: 120px !important;}#twikoo .OwO-body {    max-width: 100% !important;}#twikoo .OwO .OwO-body .OwO-items:nth-child(1),#twikoo .OwO .OwO-body .OwO-items:nth-child(4) {    max-height: 360px !important;}#twikoo .OwO-items li[title|=menhera] img {    width: 100% !important;    margin: 5px 10px;}.tk-comment .tk-owo-emotion[alt*=menhera] {    width: 300px !important;}.tk-comment .vemoji[alt|=menhera],.tk-comment .tk-owo-emotion[alt*=menhera] {    max-width: 300px !important;    max-height: 300px !important;    margin: 8px 1px;    display: block !important;}@media screen and (max-width: 768px) {    .tk-comment .vemoji[alt|=menhera], .tk-comment .tk-owo-emotion[alt*=menhera] {        max-width: calc(100% - 30px) !important;        max-height: calc(100% - 30px) !important;    }    .OwO .OwO-body .OwO-items-image .OwO-item[title*=menhera] {        max-width: calc(50% - 10px);        box-sizing: border-box;    }    }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
